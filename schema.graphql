# source: http://localhost:5000/graphql
# timestamp: Tue Sep 25 2018 11:25:47 GMT-0600 (MDT)

"""
Table to store the clutter types available to describe stationary monitoring sites
"""
type ClutterType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  description: String

  """
  Reads and enables pagination through a set of `StationaryAcousticEvent`.
  """
  stationaryAcousticEventsByClutterTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StationaryAcousticEvent`."""
    orderBy: [StationaryAcousticEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StationaryAcousticEventCondition
  ): StationaryAcousticEventsConnection!
}

"""
A condition to be used against `ClutterType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ClutterTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""An input for mutations affecting `ClutterType`"""
input ClutterTypeInput {
  id: Int
  description: String
}

"""
Represents an update to a `ClutterType`. Fields that are set will be updated.
"""
input ClutterTypePatch {
  id: Int
  description: String
}

"""A connection to a list of `ClutterType` values."""
type ClutterTypesConnection {
  """A list of `ClutterType` objects."""
  nodes: [ClutterType]!

  """
  A list of edges which contains the `ClutterType` and cursor to aid in pagination.
  """
  edges: [ClutterTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ClutterType` you could get from the connection."""
  totalCount: Int
}

"""A `ClutterType` edge in the connection."""
type ClutterTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ClutterType` at the end of the edge."""
  node: ClutterType
}

"""Methods to use when ordering `ClutterType`."""
enum ClutterTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Table that stores the meta data about a given colony county event.  CCC can be
for multiple geographic "sites" at diff levels of organization of the site
(section, cluster etc...)
"""
type ColonyCountEvent implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  surveyId: Int!
  dateTimeStart: Datetime
  dateTimeEnd: Datetime
  surveyedBy: String
  comments: String

  """
  Column to differentiate the different types of colony counts: winter
  hibernaculum vs summer maternity.  1 = winter hib., 2 = summer mat.
  """
  eventType: Int

  """Reads a single `Survey` that is related to this `ColonyCountEvent`."""
  surveyBySurveyId: Survey

  """
  Reads and enables pagination through a set of `ColonyCountSiteSectionEvent`.
  """
  colonyCountSiteSectionEventsByEventId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ColonyCountSiteSectionEvent`."""
    orderBy: [ColonyCountSiteSectionEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ColonyCountSiteSectionEventCondition
  ): ColonyCountSiteSectionEventsConnection!
}

"""
A condition to be used against `ColonyCountEvent` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ColonyCountEventCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `surveyId` field."""
  surveyId: Int

  """Checks for equality with the object’s `dateTimeStart` field."""
  dateTimeStart: Datetime

  """Checks for equality with the object’s `dateTimeEnd` field."""
  dateTimeEnd: Datetime

  """Checks for equality with the object’s `surveyedBy` field."""
  surveyedBy: String

  """Checks for equality with the object’s `comments` field."""
  comments: String

  """Checks for equality with the object’s `eventType` field."""
  eventType: Int
}

"""An input for mutations affecting `ColonyCountEvent`"""
input ColonyCountEventInput {
  id: Int
  surveyId: Int!
  dateTimeStart: Datetime
  dateTimeEnd: Datetime
  surveyedBy: String
  comments: String

  """
  Column to differentiate the different types of colony counts: winter
  hibernaculum vs summer maternity.  1 = winter hib., 2 = summer mat.
  """
  eventType: Int
}

"""
Represents an update to a `ColonyCountEvent`. Fields that are set will be updated.
"""
input ColonyCountEventPatch {
  id: Int
  surveyId: Int
  dateTimeStart: Datetime
  dateTimeEnd: Datetime
  surveyedBy: String
  comments: String

  """
  Column to differentiate the different types of colony counts: winter
  hibernaculum vs summer maternity.  1 = winter hib., 2 = summer mat.
  """
  eventType: Int
}

"""A connection to a list of `ColonyCountEvent` values."""
type ColonyCountEventsConnection {
  """A list of `ColonyCountEvent` objects."""
  nodes: [ColonyCountEvent]!

  """
  A list of edges which contains the `ColonyCountEvent` and cursor to aid in pagination.
  """
  edges: [ColonyCountEventsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ColonyCountEvent` you could get from the connection.
  """
  totalCount: Int
}

"""A `ColonyCountEvent` edge in the connection."""
type ColonyCountEventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ColonyCountEvent` at the end of the edge."""
  node: ColonyCountEvent
}

"""Methods to use when ordering `ColonyCountEvent`."""
enum ColonyCountEventsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SURVEY_ID_ASC
  SURVEY_ID_DESC
  DATE_TIME_START_ASC
  DATE_TIME_START_DESC
  DATE_TIME_END_ASC
  DATE_TIME_END_DESC
  SURVEYED_BY_ASC
  SURVEYED_BY_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  EVENT_TYPE_ASC
  EVENT_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Table that section level at which a colony count took place.  The level can be cave, section, cluster.....
"""
type ColonyCountSiteSectionEvent implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  eventId: Int!

  """
  ID of the section level that allows the count to take place at the full site (i.e. cave) level or sub section level
  """
  siteSectionId: Int!
  rh: Int
  temp: Int
  percentBatsWithVisibleFungus: Float
  winterYearPdPresumed: Int
  howPdPresumedId: Int
  winterYearWnsPresumed: Int
  howWnsPresumedId: Int
  lastWnsNegWinterYear: Datetime
  comments: String

  """
  Reads a single `ColonyCountEvent` that is related to this `ColonyCountSiteSectionEvent`.
  """
  colonyCountEventByEventId: ColonyCountEvent

  """
  Reads a single `SiteSection` that is related to this `ColonyCountSiteSectionEvent`.
  """
  siteSectionBySiteSectionId: SiteSection

  """
  Reads a single `HowPdPresumed` that is related to this `ColonyCountSiteSectionEvent`.
  """
  howPdPresumedByHowPdPresumedId: HowPdPresumed

  """
  Reads a single `HowWnsPresumed` that is related to this `ColonyCountSiteSectionEvent`.
  """
  howWnsPresumedByHowWnsPresumedId: HowWnsPresumed

  """
  Reads and enables pagination through a set of `ColonyCountSiteSectionValue`.
  """
  colonyCountSiteSectionValuesBySiteSectionEventId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ColonyCountSiteSectionValue`."""
    orderBy: [ColonyCountSiteSectionValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ColonyCountSiteSectionValueCondition
  ): ColonyCountSiteSectionValuesConnection!
}

"""
A condition to be used against `ColonyCountSiteSectionEvent` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ColonyCountSiteSectionEventCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `eventId` field."""
  eventId: Int

  """Checks for equality with the object’s `siteSectionId` field."""
  siteSectionId: Int

  """Checks for equality with the object’s `rh` field."""
  rh: Int

  """Checks for equality with the object’s `temp` field."""
  temp: Int

  """
  Checks for equality with the object’s `percentBatsWithVisibleFungus` field.
  """
  percentBatsWithVisibleFungus: Float

  """Checks for equality with the object’s `winterYearPdPresumed` field."""
  winterYearPdPresumed: Int

  """Checks for equality with the object’s `howPdPresumedId` field."""
  howPdPresumedId: Int

  """Checks for equality with the object’s `winterYearWnsPresumed` field."""
  winterYearWnsPresumed: Int

  """Checks for equality with the object’s `howWnsPresumedId` field."""
  howWnsPresumedId: Int

  """Checks for equality with the object’s `lastWnsNegWinterYear` field."""
  lastWnsNegWinterYear: Datetime

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `ColonyCountSiteSectionEvent`"""
input ColonyCountSiteSectionEventInput {
  id: Int
  eventId: Int!

  """
  ID of the section level that allows the count to take place at the full site (i.e. cave) level or sub section level
  """
  siteSectionId: Int!
  rh: Int
  temp: Int
  percentBatsWithVisibleFungus: Float
  winterYearPdPresumed: Int
  howPdPresumedId: Int
  winterYearWnsPresumed: Int
  howWnsPresumedId: Int
  lastWnsNegWinterYear: Datetime
  comments: String
}

"""
Represents an update to a `ColonyCountSiteSectionEvent`. Fields that are set will be updated.
"""
input ColonyCountSiteSectionEventPatch {
  id: Int
  eventId: Int

  """
  ID of the section level that allows the count to take place at the full site (i.e. cave) level or sub section level
  """
  siteSectionId: Int
  rh: Int
  temp: Int
  percentBatsWithVisibleFungus: Float
  winterYearPdPresumed: Int
  howPdPresumedId: Int
  winterYearWnsPresumed: Int
  howWnsPresumedId: Int
  lastWnsNegWinterYear: Datetime
  comments: String
}

"""A connection to a list of `ColonyCountSiteSectionEvent` values."""
type ColonyCountSiteSectionEventsConnection {
  """A list of `ColonyCountSiteSectionEvent` objects."""
  nodes: [ColonyCountSiteSectionEvent]!

  """
  A list of edges which contains the `ColonyCountSiteSectionEvent` and cursor to aid in pagination.
  """
  edges: [ColonyCountSiteSectionEventsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ColonyCountSiteSectionEvent` you could get from the connection.
  """
  totalCount: Int
}

"""A `ColonyCountSiteSectionEvent` edge in the connection."""
type ColonyCountSiteSectionEventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ColonyCountSiteSectionEvent` at the end of the edge."""
  node: ColonyCountSiteSectionEvent
}

"""Methods to use when ordering `ColonyCountSiteSectionEvent`."""
enum ColonyCountSiteSectionEventsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  SITE_SECTION_ID_ASC
  SITE_SECTION_ID_DESC
  RH_ASC
  RH_DESC
  TEMP_ASC
  TEMP_DESC
  PERCENT_BATS_WITH_VISIBLE_FUNGUS_ASC
  PERCENT_BATS_WITH_VISIBLE_FUNGUS_DESC
  WINTER_YEAR_PD_PRESUMED_ASC
  WINTER_YEAR_PD_PRESUMED_DESC
  HOW_PD_PRESUMED_ID_ASC
  HOW_PD_PRESUMED_ID_DESC
  WINTER_YEAR_WNS_PRESUMED_ASC
  WINTER_YEAR_WNS_PRESUMED_DESC
  HOW_WNS_PRESUMED_ID_ASC
  HOW_WNS_PRESUMED_ID_DESC
  LAST_WNS_NEG_WINTER_YEAR_ASC
  LAST_WNS_NEG_WINTER_YEAR_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ColonyCountSiteSectionValue implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  siteSectionEventId: Int!

  """
  Consistent survey is "yes" if the colony count event conducted is consistent
  with surveys in previous years and thus produces comparable counts across years.
  """
  consistentSurvey: Boolean

  """
  Details regarding consistency of the survey and how it compares to previous survey efforts.
  """
  consistentSurveyDetails: String
  speciesId: Int!

  """Total count of live bats"""
  countValue: Int!

  """Total count of dead bats"""
  countDead: Int
  presumedCauseDeathId: Int
  countMethodId: Int!
  minEstimate: Int
  maxEstimate: Int
  countConfidenceId: Int
  comments: String

  """
  Reads a single `ColonyCountSiteSectionEvent` that is related to this `ColonyCountSiteSectionValue`.
  """
  colonyCountSiteSectionEventBySiteSectionEventId: ColonyCountSiteSectionEvent

  """
  Reads a single `Species` that is related to this `ColonyCountSiteSectionValue`.
  """
  speciesBySpeciesId: Species

  """
  Reads a single `PresumedCauseDeath` that is related to this `ColonyCountSiteSectionValue`.
  """
  presumedCauseDeathByPresumedCauseDeathId: PresumedCauseDeath

  """
  Reads a single `CountMethod` that is related to this `ColonyCountSiteSectionValue`.
  """
  countMethodByCountMethodId: CountMethod

  """
  Reads a single `CountConfidence` that is related to this `ColonyCountSiteSectionValue`.
  """
  countConfidenceByCountConfidenceId: CountConfidence
}

"""
A condition to be used against `ColonyCountSiteSectionValue` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ColonyCountSiteSectionValueCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `siteSectionEventId` field."""
  siteSectionEventId: Int

  """Checks for equality with the object’s `consistentSurvey` field."""
  consistentSurvey: Boolean

  """
  Checks for equality with the object’s `consistentSurveyDetails` field.
  """
  consistentSurveyDetails: String

  """Checks for equality with the object’s `speciesId` field."""
  speciesId: Int

  """Checks for equality with the object’s `countValue` field."""
  countValue: Int

  """Checks for equality with the object’s `countDead` field."""
  countDead: Int

  """Checks for equality with the object’s `presumedCauseDeathId` field."""
  presumedCauseDeathId: Int

  """Checks for equality with the object’s `countMethodId` field."""
  countMethodId: Int

  """Checks for equality with the object’s `minEstimate` field."""
  minEstimate: Int

  """Checks for equality with the object’s `maxEstimate` field."""
  maxEstimate: Int

  """Checks for equality with the object’s `countConfidenceId` field."""
  countConfidenceId: Int

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `ColonyCountSiteSectionValue`"""
input ColonyCountSiteSectionValueInput {
  id: Int
  siteSectionEventId: Int!

  """
  Consistent survey is "yes" if the colony count event conducted is consistent
  with surveys in previous years and thus produces comparable counts across years.
  """
  consistentSurvey: Boolean

  """
  Details regarding consistency of the survey and how it compares to previous survey efforts.
  """
  consistentSurveyDetails: String
  speciesId: Int!

  """Total count of live bats"""
  countValue: Int!

  """Total count of dead bats"""
  countDead: Int
  presumedCauseDeathId: Int
  countMethodId: Int!
  minEstimate: Int
  maxEstimate: Int
  countConfidenceId: Int
  comments: String
}

"""
Represents an update to a `ColonyCountSiteSectionValue`. Fields that are set will be updated.
"""
input ColonyCountSiteSectionValuePatch {
  id: Int
  siteSectionEventId: Int

  """
  Consistent survey is "yes" if the colony count event conducted is consistent
  with surveys in previous years and thus produces comparable counts across years.
  """
  consistentSurvey: Boolean

  """
  Details regarding consistency of the survey and how it compares to previous survey efforts.
  """
  consistentSurveyDetails: String
  speciesId: Int

  """Total count of live bats"""
  countValue: Int

  """Total count of dead bats"""
  countDead: Int
  presumedCauseDeathId: Int
  countMethodId: Int
  minEstimate: Int
  maxEstimate: Int
  countConfidenceId: Int
  comments: String
}

"""A connection to a list of `ColonyCountSiteSectionValue` values."""
type ColonyCountSiteSectionValuesConnection {
  """A list of `ColonyCountSiteSectionValue` objects."""
  nodes: [ColonyCountSiteSectionValue]!

  """
  A list of edges which contains the `ColonyCountSiteSectionValue` and cursor to aid in pagination.
  """
  edges: [ColonyCountSiteSectionValuesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ColonyCountSiteSectionValue` you could get from the connection.
  """
  totalCount: Int
}

"""A `ColonyCountSiteSectionValue` edge in the connection."""
type ColonyCountSiteSectionValuesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ColonyCountSiteSectionValue` at the end of the edge."""
  node: ColonyCountSiteSectionValue
}

"""Methods to use when ordering `ColonyCountSiteSectionValue`."""
enum ColonyCountSiteSectionValuesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SITE_SECTION_EVENT_ID_ASC
  SITE_SECTION_EVENT_ID_DESC
  CONSISTENT_SURVEY_ASC
  CONSISTENT_SURVEY_DESC
  CONSISTENT_SURVEY_DETAILS_ASC
  CONSISTENT_SURVEY_DETAILS_DESC
  SPECIES_ID_ASC
  SPECIES_ID_DESC
  COUNT_VALUE_ASC
  COUNT_VALUE_DESC
  COUNT_DEAD_ASC
  COUNT_DEAD_DESC
  PRESUMED_CAUSE_DEATH_ID_ASC
  PRESUMED_CAUSE_DEATH_ID_DESC
  COUNT_METHOD_ID_ASC
  COUNT_METHOD_ID_DESC
  MIN_ESTIMATE_ASC
  MIN_ESTIMATE_DESC
  MAX_ESTIMATE_ASC
  MAX_ESTIMATE_DESC
  COUNT_CONFIDENCE_ID_ASC
  COUNT_CONFIDENCE_ID_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Drop down list for categorical description of count confidence - e.g. Low, medium, high
"""
type CountConfidence implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  description: String

  """
  Reads and enables pagination through a set of `ColonyCountSiteSectionValue`.
  """
  colonyCountSiteSectionValuesByCountConfidenceId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ColonyCountSiteSectionValue`."""
    orderBy: [ColonyCountSiteSectionValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ColonyCountSiteSectionValueCondition
  ): ColonyCountSiteSectionValuesConnection!
}

"""
A condition to be used against `CountConfidence` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CountConfidenceCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""An input for mutations affecting `CountConfidence`"""
input CountConfidenceInput {
  id: Int
  description: String
}

"""
Represents an update to a `CountConfidence`. Fields that are set will be updated.
"""
input CountConfidencePatch {
  id: Int
  description: String
}

"""A connection to a list of `CountConfidence` values."""
type CountConfidencesConnection {
  """A list of `CountConfidence` objects."""
  nodes: [CountConfidence]!

  """
  A list of edges which contains the `CountConfidence` and cursor to aid in pagination.
  """
  edges: [CountConfidencesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CountConfidence` you could get from the connection.
  """
  totalCount: Int
}

"""A `CountConfidence` edge in the connection."""
type CountConfidencesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CountConfidence` at the end of the edge."""
  node: CountConfidence
}

"""Methods to use when ordering `CountConfidence`."""
enum CountConfidencesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Drop down list for methods used to count bats - e.g. Visual count on site, visual estimate on site, count by photograph
"""
type CountMethod implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  description: String

  """
  Reads and enables pagination through a set of `ColonyCountSiteSectionValue`.
  """
  colonyCountSiteSectionValuesByCountMethodId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ColonyCountSiteSectionValue`."""
    orderBy: [ColonyCountSiteSectionValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ColonyCountSiteSectionValueCondition
  ): ColonyCountSiteSectionValuesConnection!
}

"""
A condition to be used against `CountMethod` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CountMethodCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""An input for mutations affecting `CountMethod`"""
input CountMethodInput {
  id: Int
  description: String
}

"""
Represents an update to a `CountMethod`. Fields that are set will be updated.
"""
input CountMethodPatch {
  id: Int
  description: String
}

"""A connection to a list of `CountMethod` values."""
type CountMethodsConnection {
  """A list of `CountMethod` objects."""
  nodes: [CountMethod]!

  """
  A list of edges which contains the `CountMethod` and cursor to aid in pagination.
  """
  edges: [CountMethodsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CountMethod` you could get from the connection."""
  totalCount: Int
}

"""A `CountMethod` edge in the connection."""
type CountMethodsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CountMethod` at the end of the edge."""
  node: CountMethod
}

"""Methods to use when ordering `CountMethod`."""
enum CountMethodsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `ClutterType` mutation."""
input CreateClutterTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ClutterType` to be created by this mutation."""
  clutterType: ClutterTypeInput!
}

"""The output of our create `ClutterType` mutation."""
type CreateClutterTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ClutterType` that was created by this mutation."""
  clutterType: ClutterType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ClutterType`. May be used by Relay 1."""
  clutterTypeEdge(
    """The method to use when ordering `ClutterType`."""
    orderBy: [ClutterTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ClutterTypesEdge
}

"""All input for the create `ColonyCountEvent` mutation."""
input CreateColonyCountEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ColonyCountEvent` to be created by this mutation."""
  colonyCountEvent: ColonyCountEventInput!
}

"""The output of our create `ColonyCountEvent` mutation."""
type CreateColonyCountEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ColonyCountEvent` that was created by this mutation."""
  colonyCountEvent: ColonyCountEvent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `ColonyCountEvent`."""
  surveyBySurveyId: Survey

  """An edge for our `ColonyCountEvent`. May be used by Relay 1."""
  colonyCountEventEdge(
    """The method to use when ordering `ColonyCountEvent`."""
    orderBy: [ColonyCountEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ColonyCountEventsEdge
}

"""All input for the create `ColonyCountSiteSectionEvent` mutation."""
input CreateColonyCountSiteSectionEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ColonyCountSiteSectionEvent` to be created by this mutation."""
  colonyCountSiteSectionEvent: ColonyCountSiteSectionEventInput!
}

"""The output of our create `ColonyCountSiteSectionEvent` mutation."""
type CreateColonyCountSiteSectionEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ColonyCountSiteSectionEvent` that was created by this mutation."""
  colonyCountSiteSectionEvent: ColonyCountSiteSectionEvent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ColonyCountEvent` that is related to this `ColonyCountSiteSectionEvent`.
  """
  colonyCountEventByEventId: ColonyCountEvent

  """
  Reads a single `SiteSection` that is related to this `ColonyCountSiteSectionEvent`.
  """
  siteSectionBySiteSectionId: SiteSection

  """
  Reads a single `HowPdPresumed` that is related to this `ColonyCountSiteSectionEvent`.
  """
  howPdPresumedByHowPdPresumedId: HowPdPresumed

  """
  Reads a single `HowWnsPresumed` that is related to this `ColonyCountSiteSectionEvent`.
  """
  howWnsPresumedByHowWnsPresumedId: HowWnsPresumed

  """
  An edge for our `ColonyCountSiteSectionEvent`. May be used by Relay 1.
  """
  colonyCountSiteSectionEventEdge(
    """The method to use when ordering `ColonyCountSiteSectionEvent`."""
    orderBy: [ColonyCountSiteSectionEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ColonyCountSiteSectionEventsEdge
}

"""All input for the create `ColonyCountSiteSectionValue` mutation."""
input CreateColonyCountSiteSectionValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ColonyCountSiteSectionValue` to be created by this mutation."""
  colonyCountSiteSectionValue: ColonyCountSiteSectionValueInput!
}

"""The output of our create `ColonyCountSiteSectionValue` mutation."""
type CreateColonyCountSiteSectionValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ColonyCountSiteSectionValue` that was created by this mutation."""
  colonyCountSiteSectionValue: ColonyCountSiteSectionValue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ColonyCountSiteSectionEvent` that is related to this `ColonyCountSiteSectionValue`.
  """
  colonyCountSiteSectionEventBySiteSectionEventId: ColonyCountSiteSectionEvent

  """
  Reads a single `Species` that is related to this `ColonyCountSiteSectionValue`.
  """
  speciesBySpeciesId: Species

  """
  Reads a single `PresumedCauseDeath` that is related to this `ColonyCountSiteSectionValue`.
  """
  presumedCauseDeathByPresumedCauseDeathId: PresumedCauseDeath

  """
  Reads a single `CountMethod` that is related to this `ColonyCountSiteSectionValue`.
  """
  countMethodByCountMethodId: CountMethod

  """
  Reads a single `CountConfidence` that is related to this `ColonyCountSiteSectionValue`.
  """
  countConfidenceByCountConfidenceId: CountConfidence

  """
  An edge for our `ColonyCountSiteSectionValue`. May be used by Relay 1.
  """
  colonyCountSiteSectionValueEdge(
    """The method to use when ordering `ColonyCountSiteSectionValue`."""
    orderBy: [ColonyCountSiteSectionValuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ColonyCountSiteSectionValuesEdge
}

"""All input for the create `CountConfidence` mutation."""
input CreateCountConfidenceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CountConfidence` to be created by this mutation."""
  countConfidence: CountConfidenceInput!
}

"""The output of our create `CountConfidence` mutation."""
type CreateCountConfidencePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CountConfidence` that was created by this mutation."""
  countConfidence: CountConfidence

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CountConfidence`. May be used by Relay 1."""
  countConfidenceEdge(
    """The method to use when ordering `CountConfidence`."""
    orderBy: [CountConfidencesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CountConfidencesEdge
}

"""All input for the create `CountMethod` mutation."""
input CreateCountMethodInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CountMethod` to be created by this mutation."""
  countMethod: CountMethodInput!
}

"""The output of our create `CountMethod` mutation."""
type CreateCountMethodPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CountMethod` that was created by this mutation."""
  countMethod: CountMethod

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CountMethod`. May be used by Relay 1."""
  countMethodEdge(
    """The method to use when ordering `CountMethod`."""
    orderBy: [CountMethodsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CountMethodsEdge
}

"""All input for the create `Device` mutation."""
input CreateDeviceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Device` to be created by this mutation."""
  device: DeviceInput!
}

"""The output of our create `Device` mutation."""
type CreateDevicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Device` that was created by this mutation."""
  device: Device

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `DeviceType` that is related to this `Device`."""
  deviceTypeByDeviceTypeId: DeviceType

  """Reads a single `MicrophoneType` that is related to this `Device`."""
  microphoneTypeByMicrophoneTypeId: MicrophoneType

  """
  Reads a single `MicrophoneHousingType` that is related to this `Device`.
  """
  microphoneHousingTypeByMicrophoneHousingTypeId: MicrophoneHousingType

  """An edge for our `Device`. May be used by Relay 1."""
  deviceEdge(
    """The method to use when ordering `Device`."""
    orderBy: [DevicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DevicesEdge
}

"""All input for the create `DeviceType` mutation."""
input CreateDeviceTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DeviceType` to be created by this mutation."""
  deviceType: DeviceTypeInput!
}

"""The output of our create `DeviceType` mutation."""
type CreateDeviceTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DeviceType` that was created by this mutation."""
  deviceType: DeviceType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `DeviceType`. May be used by Relay 1."""
  deviceTypeEdge(
    """The method to use when ordering `DeviceType`."""
    orderBy: [DeviceTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DeviceTypesEdge
}

"""All input for the create `EnvironmentalDatum` mutation."""
input CreateEnvironmentalDatumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EnvironmentalDatum` to be created by this mutation."""
  environmentalDatum: EnvironmentalDatumInput!
}

"""The output of our create `EnvironmentalDatum` mutation."""
type CreateEnvironmentalDatumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EnvironmentalDatum` that was created by this mutation."""
  environmentalDatum: EnvironmentalDatum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LoggerType` that is related to this `EnvironmentalDatum`.
  """
  loggerTypeByLoggerTypeId: LoggerType

  """An edge for our `EnvironmentalDatum`. May be used by Relay 1."""
  environmentalDatumEdge(
    """The method to use when ordering `EnvironmentalDatum`."""
    orderBy: [EnvironmentalDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): EnvironmentalDataEdge
}

"""All input for the create `HabitatType` mutation."""
input CreateHabitatTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HabitatType` to be created by this mutation."""
  habitatType: HabitatTypeInput!
}

"""The output of our create `HabitatType` mutation."""
type CreateHabitatTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HabitatType` that was created by this mutation."""
  habitatType: HabitatType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HabitatType`. May be used by Relay 1."""
  habitatTypeEdge(
    """The method to use when ordering `HabitatType`."""
    orderBy: [HabitatTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): HabitatTypesEdge
}

"""All input for the create `HowPdPresumed` mutation."""
input CreateHowPdPresumedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HowPdPresumed` to be created by this mutation."""
  howPdPresumed: HowPdPresumedInput!
}

"""The output of our create `HowPdPresumed` mutation."""
type CreateHowPdPresumedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HowPdPresumed` that was created by this mutation."""
  howPdPresumed: HowPdPresumed

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HowPdPresumed`. May be used by Relay 1."""
  howPdPresumedEdge(
    """The method to use when ordering `HowPdPresumed`."""
    orderBy: [HowPdPresumedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): HowPdPresumedsEdge
}

"""All input for the create `HowWnsPresumed` mutation."""
input CreateHowWnsPresumedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HowWnsPresumed` to be created by this mutation."""
  howWnsPresumed: HowWnsPresumedInput!
}

"""The output of our create `HowWnsPresumed` mutation."""
type CreateHowWnsPresumedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HowWnsPresumed` that was created by this mutation."""
  howWnsPresumed: HowWnsPresumed

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HowWnsPresumed`. May be used by Relay 1."""
  howWnsPresumedEdge(
    """The method to use when ordering `HowWnsPresumed`."""
    orderBy: [HowWnsPresumedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): HowWnsPresumedsEdge
}

"""All input for the create `Image` mutation."""
input CreateImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Image` to be created by this mutation."""
  image: ImageInput!
}

"""The output of our create `Image` mutation."""
type CreateImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was created by this mutation."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesEdge
}

"""All input for the create `Laboratory` mutation."""
input CreateLaboratoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Laboratory` to be created by this mutation."""
  laboratory: LaboratoryInput!
}

"""The output of our create `Laboratory` mutation."""
type CreateLaboratoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Laboratory` that was created by this mutation."""
  laboratory: Laboratory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Laboratory`. May be used by Relay 1."""
  laboratoryEdge(
    """The method to use when ordering `Laboratory`."""
    orderBy: [LaboratoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LaboratoriesEdge
}

"""All input for the create `LoggerType` mutation."""
input CreateLoggerTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LoggerType` to be created by this mutation."""
  loggerType: LoggerTypeInput!
}

"""The output of our create `LoggerType` mutation."""
type CreateLoggerTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LoggerType` that was created by this mutation."""
  loggerType: LoggerType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LoggerType`. May be used by Relay 1."""
  loggerTypeEdge(
    """The method to use when ordering `LoggerType`."""
    orderBy: [LoggerTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LoggerTypesEdge
}

"""All input for the create `MicrophoneHousingType` mutation."""
input CreateMicrophoneHousingTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MicrophoneHousingType` to be created by this mutation."""
  microphoneHousingType: MicrophoneHousingTypeInput!
}

"""The output of our create `MicrophoneHousingType` mutation."""
type CreateMicrophoneHousingTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MicrophoneHousingType` that was created by this mutation."""
  microphoneHousingType: MicrophoneHousingType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MicrophoneHousingType`. May be used by Relay 1."""
  microphoneHousingTypeEdge(
    """The method to use when ordering `MicrophoneHousingType`."""
    orderBy: [MicrophoneHousingTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MicrophoneHousingTypesEdge
}

"""All input for the create `MicrophoneOrientation` mutation."""
input CreateMicrophoneOrientationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MicrophoneOrientation` to be created by this mutation."""
  microphoneOrientation: MicrophoneOrientationInput!
}

"""The output of our create `MicrophoneOrientation` mutation."""
type CreateMicrophoneOrientationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MicrophoneOrientation` that was created by this mutation."""
  microphoneOrientation: MicrophoneOrientation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MicrophoneOrientation`. May be used by Relay 1."""
  microphoneOrientationEdge(
    """The method to use when ordering `MicrophoneOrientation`."""
    orderBy: [MicrophoneOrientationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MicrophoneOrientationsEdge
}

"""All input for the create `MicrophoneType` mutation."""
input CreateMicrophoneTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MicrophoneType` to be created by this mutation."""
  microphoneType: MicrophoneTypeInput!
}

"""The output of our create `MicrophoneType` mutation."""
type CreateMicrophoneTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MicrophoneType` that was created by this mutation."""
  microphoneType: MicrophoneType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MicrophoneType`. May be used by Relay 1."""
  microphoneTypeEdge(
    """The method to use when ordering `MicrophoneType`."""
    orderBy: [MicrophoneTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MicrophoneTypesEdge
}

"""All input for the create `MobileAcousticEvent` mutation."""
input CreateMobileAcousticEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MobileAcousticEvent` to be created by this mutation."""
  mobileAcousticEvent: MobileAcousticEventInput!
}

"""The output of our create `MobileAcousticEvent` mutation."""
type CreateMobileAcousticEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MobileAcousticEvent` that was created by this mutation."""
  mobileAcousticEvent: MobileAcousticEvent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Survey` that is related to this `MobileAcousticEvent`.
  """
  surveyBySurveyId: Survey

  """
  Reads a single `Device` that is related to this `MobileAcousticEvent`.
  """
  deviceByDeviceId: Device

  """
  Reads a single `HabitatType` that is related to this `MobileAcousticEvent`.
  """
  habitatTypeByHabitatTypeId: HabitatType

  """An edge for our `MobileAcousticEvent`. May be used by Relay 1."""
  mobileAcousticEventEdge(
    """The method to use when ordering `MobileAcousticEvent`."""
    orderBy: [MobileAcousticEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MobileAcousticEventsEdge
}

"""All input for the create `MobileAcousticValue` mutation."""
input CreateMobileAcousticValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MobileAcousticValue` to be created by this mutation."""
  mobileAcousticValue: MobileAcousticValueInput!
}

"""The output of our create `MobileAcousticValue` mutation."""
type CreateMobileAcousticValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MobileAcousticValue` that was created by this mutation."""
  mobileAcousticValue: MobileAcousticValue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Software` that is related to this `MobileAcousticValue`.
  """
  softwareBySoftwareId: Software

  """
  Reads a single `Species` that is related to this `MobileAcousticValue`.
  """
  speciesBySpeciesId: Species

  """An edge for our `MobileAcousticValue`. May be used by Relay 1."""
  mobileAcousticValueEdge(
    """The method to use when ordering `MobileAcousticValue`."""
    orderBy: [MobileAcousticValuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MobileAcousticValuesEdge
}

"""All input for the create `OrganismCount` mutation."""
input CreateOrganismCountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OrganismCount` to be created by this mutation."""
  organismCount: OrganismCountInput!
}

"""The output of our create `OrganismCount` mutation."""
type CreateOrganismCountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrganismCount` that was created by this mutation."""
  organismCount: OrganismCount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `OrganismCount`. May be used by Relay 1."""
  organismCountEdge(
    """The method to use when ordering `OrganismCount`."""
    orderBy: [OrganismCountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganismCountsEdge
}

"""All input for the create `PresumedCauseDeath` mutation."""
input CreatePresumedCauseDeathInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PresumedCauseDeath` to be created by this mutation."""
  presumedCauseDeath: PresumedCauseDeathInput!
}

"""The output of our create `PresumedCauseDeath` mutation."""
type CreatePresumedCauseDeathPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PresumedCauseDeath` that was created by this mutation."""
  presumedCauseDeath: PresumedCauseDeath

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PresumedCauseDeath`. May be used by Relay 1."""
  presumedCauseDeathEdge(
    """The method to use when ordering `PresumedCauseDeath`."""
    orderBy: [PresumedCauseDeathsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PresumedCauseDeathsEdge
}

"""All input for the create `ProjectReference` mutation."""
input CreateProjectReferenceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectReference` to be created by this mutation."""
  projectReference: ProjectReferenceInput!
}

"""The output of our create `ProjectReference` mutation."""
type CreateProjectReferencePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectReference` that was created by this mutation."""
  projectReference: ProjectReference

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProjectReference`. May be used by Relay 1."""
  projectReferenceEdge(
    """The method to use when ordering `ProjectReference`."""
    orderBy: [ProjectReferencesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectReferencesEdge
}

"""All input for the create `ProjectSite` mutation."""
input CreateProjectSiteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectSite` to be created by this mutation."""
  projectSite: ProjectSiteInput!
}

"""The output of our create `ProjectSite` mutation."""
type CreateProjectSitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectSite` that was created by this mutation."""
  projectSite: ProjectSite

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProjectReference` that is related to this `ProjectSite`.
  """
  projectReferenceByProjectId: ProjectReference

  """Reads a single `Site` that is related to this `ProjectSite`."""
  siteBySiteId: Site

  """An edge for our `ProjectSite`. May be used by Relay 1."""
  projectSiteEdge(
    """The method to use when ordering `ProjectSite`."""
    orderBy: [ProjectSitesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectSitesEdge
}

"""All input for the create `SampleLevelInformation` mutation."""
input CreateSampleLevelInformationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SampleLevelInformation` to be created by this mutation."""
  sampleLevelInformation: SampleLevelInformationInput!
}

"""The output of our create `SampleLevelInformation` mutation."""
type CreateSampleLevelInformationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SampleLevelInformation` that was created by this mutation."""
  sampleLevelInformation: SampleLevelInformation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SampleType` that is related to this `SampleLevelInformation`.
  """
  sampleTypeBySampleTypeId: SampleType

  """
  Reads a single `Laboratory` that is related to this `SampleLevelInformation`.
  """
  laboratoryByLabWhereSampleSentId: Laboratory

  """An edge for our `SampleLevelInformation`. May be used by Relay 1."""
  sampleLevelInformationEdge(
    """The method to use when ordering `SampleLevelInformation`."""
    orderBy: [SampleLevelInformationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SampleLevelInformationsEdge
}

"""All input for the create `SampleType` mutation."""
input CreateSampleTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SampleType` to be created by this mutation."""
  sampleType: SampleTypeInput!
}

"""The output of our create `SampleType` mutation."""
type CreateSampleTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SampleType` that was created by this mutation."""
  sampleType: SampleType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SampleType`. May be used by Relay 1."""
  sampleTypeEdge(
    """The method to use when ordering `SampleType`."""
    orderBy: [SampleTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SampleTypesEdge
}

"""All input for the create `Site` mutation."""
input CreateSiteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Site` to be created by this mutation."""
  site: SiteInput!
}

"""All input for the create `SiteLevel` mutation."""
input CreateSiteLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SiteLevel` to be created by this mutation."""
  siteLevel: SiteLevelInput!
}

"""The output of our create `SiteLevel` mutation."""
type CreateSiteLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteLevel` that was created by this mutation."""
  siteLevel: SiteLevel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SiteLevel`. May be used by Relay 1."""
  siteLevelEdge(
    """The method to use when ordering `SiteLevel`."""
    orderBy: [SiteLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteLevelsEdge
}

"""All input for the create `SiteMaterial` mutation."""
input CreateSiteMaterialInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SiteMaterial` to be created by this mutation."""
  siteMaterial: SiteMaterialInput!
}

"""The output of our create `SiteMaterial` mutation."""
type CreateSiteMaterialPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteMaterial` that was created by this mutation."""
  siteMaterial: SiteMaterial

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SiteMaterial`. May be used by Relay 1."""
  siteMaterialEdge(
    """The method to use when ordering `SiteMaterial`."""
    orderBy: [SiteMaterialsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteMaterialsEdge
}

"""All input for the create `SiteOrganismCount` mutation."""
input CreateSiteOrganismCountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SiteOrganismCount` to be created by this mutation."""
  siteOrganismCount: SiteOrganismCountInput!
}

"""The output of our create `SiteOrganismCount` mutation."""
type CreateSiteOrganismCountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteOrganismCount` that was created by this mutation."""
  siteOrganismCount: SiteOrganismCount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Site` that is related to this `SiteOrganismCount`."""
  siteBySiteId: Site

  """
  Reads a single `OrganismCount` that is related to this `SiteOrganismCount`.
  """
  organismCountByOrganismCountId: OrganismCount

  """An edge for our `SiteOrganismCount`. May be used by Relay 1."""
  siteOrganismCountEdge(
    """The method to use when ordering `SiteOrganismCount`."""
    orderBy: [SiteOrganismCountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteOrganismCountsEdge
}

"""The output of our create `Site` mutation."""
type CreateSitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Site` that was created by this mutation."""
  site: Site

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SiteType` that is related to this `Site`."""
  siteTypeBySiteTypeId: SiteType

  """Reads a single `SiteMaterial` that is related to this `Site`."""
  siteMaterialBySiteMaterialId: SiteMaterial

  """Reads a single `SiteUse` that is related to this `Site`."""
  siteUseBySiteUseId: SiteUse

  """Reads a single `SiteSize` that is related to this `Site`."""
  siteSizeBySiteSizeId: SiteSize

  """An edge for our `Site`. May be used by Relay 1."""
  siteEdge(
    """The method to use when ordering `Site`."""
    orderBy: [SitesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SitesEdge
}

"""All input for the create `SiteSection` mutation."""
input CreateSiteSectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SiteSection` to be created by this mutation."""
  siteSection: SiteSectionInput!
}

"""The output of our create `SiteSection` mutation."""
type CreateSiteSectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteSection` that was created by this mutation."""
  siteSection: SiteSection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Site` that is related to this `SiteSection`."""
  siteBySiteId: Site

  """Reads a single `SiteLevel` that is related to this `SiteSection`."""
  siteLevelBySiteLevelId: SiteLevel

  """An edge for our `SiteSection`. May be used by Relay 1."""
  siteSectionEdge(
    """The method to use when ordering `SiteSection`."""
    orderBy: [SiteSectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteSectionsEdge
}

"""All input for the create `SiteSize` mutation."""
input CreateSiteSizeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SiteSize` to be created by this mutation."""
  siteSize: SiteSizeInput!
}

"""The output of our create `SiteSize` mutation."""
type CreateSiteSizePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteSize` that was created by this mutation."""
  siteSize: SiteSize

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SiteSize`. May be used by Relay 1."""
  siteSizeEdge(
    """The method to use when ordering `SiteSize`."""
    orderBy: [SiteSizesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteSizesEdge
}

"""All input for the create `SiteType` mutation."""
input CreateSiteTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SiteType` to be created by this mutation."""
  siteType: SiteTypeInput!
}

"""The output of our create `SiteType` mutation."""
type CreateSiteTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteType` that was created by this mutation."""
  siteType: SiteType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SiteType`. May be used by Relay 1."""
  siteTypeEdge(
    """The method to use when ordering `SiteType`."""
    orderBy: [SiteTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteTypesEdge
}

"""All input for the create `SiteUse` mutation."""
input CreateSiteUseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SiteUse` to be created by this mutation."""
  siteUse: SiteUseInput!
}

"""The output of our create `SiteUse` mutation."""
type CreateSiteUsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteUse` that was created by this mutation."""
  siteUse: SiteUse

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SiteUse`. May be used by Relay 1."""
  siteUseEdge(
    """The method to use when ordering `SiteUse`."""
    orderBy: [SiteUsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteUsesEdge
}

"""All input for the create `Software` mutation."""
input CreateSoftwareInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Software` to be created by this mutation."""
  software: SoftwareInput!
}

"""The output of our create `Software` mutation."""
type CreateSoftwarePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Software` that was created by this mutation."""
  software: Software

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Software`. May be used by Relay 1."""
  softwareEdge(
    """The method to use when ordering `Software`."""
    orderBy: [SoftwaresOrderBy!] = [PRIMARY_KEY_ASC]
  ): SoftwaresEdge
}

"""All input for the create `Species` mutation."""
input CreateSpeciesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Species` to be created by this mutation."""
  species: SpeciesInput!
}

"""The output of our create `Species` mutation."""
type CreateSpeciesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Species` that was created by this mutation."""
  species: Species

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Species`. May be used by Relay 1."""
  speciesEdge(
    """The method to use when ordering `Species`."""
    orderBy: [SpeciesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpeciesEdge
}

"""All input for the create `StationaryAcousticEvent` mutation."""
input CreateStationaryAcousticEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `StationaryAcousticEvent` to be created by this mutation."""
  stationaryAcousticEvent: StationaryAcousticEventInput!
}

"""The output of our create `StationaryAcousticEvent` mutation."""
type CreateStationaryAcousticEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StationaryAcousticEvent` that was created by this mutation."""
  stationaryAcousticEvent: StationaryAcousticEvent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Survey` that is related to this `StationaryAcousticEvent`.
  """
  surveyBySurveyId: Survey

  """
  Reads a single `Device` that is related to this `StationaryAcousticEvent`.
  """
  deviceByDeviceId: Device

  """
  Reads a single `MicrophoneOrientation` that is related to this `StationaryAcousticEvent`.
  """
  microphoneOrientationByMicrophoneOrientationId: MicrophoneOrientation

  """
  Reads a single `ClutterType` that is related to this `StationaryAcousticEvent`.
  """
  clutterTypeByClutterTypeId: ClutterType

  """An edge for our `StationaryAcousticEvent`. May be used by Relay 1."""
  stationaryAcousticEventEdge(
    """The method to use when ordering `StationaryAcousticEvent`."""
    orderBy: [StationaryAcousticEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): StationaryAcousticEventsEdge
}

"""All input for the create `StationaryAcousticImage` mutation."""
input CreateStationaryAcousticImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `StationaryAcousticImage` to be created by this mutation."""
  stationaryAcousticImage: StationaryAcousticImageInput!
}

"""The output of our create `StationaryAcousticImage` mutation."""
type CreateStationaryAcousticImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StationaryAcousticImage` that was created by this mutation."""
  stationaryAcousticImage: StationaryAcousticImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Image` that is related to this `StationaryAcousticImage`.
  """
  imageByImageId: Image

  """
  Reads a single `StationaryAcousticEvent` that is related to this `StationaryAcousticImage`.
  """
  stationaryAcousticEventByStationaryAcousticEventId: StationaryAcousticEvent

  """An edge for our `StationaryAcousticImage`. May be used by Relay 1."""
  stationaryAcousticImageEdge(
    """The method to use when ordering `StationaryAcousticImage`."""
    orderBy: [StationaryAcousticImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): StationaryAcousticImagesEdge
}

"""All input for the create `StationaryAcousticValue` mutation."""
input CreateStationaryAcousticValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `StationaryAcousticValue` to be created by this mutation."""
  stationaryAcousticValue: StationaryAcousticValueInput!
}

"""The output of our create `StationaryAcousticValue` mutation."""
type CreateStationaryAcousticValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StationaryAcousticValue` that was created by this mutation."""
  stationaryAcousticValue: StationaryAcousticValue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `StationaryAcousticEvent` that is related to this `StationaryAcousticValue`.
  """
  stationaryAcousticEventBySaSurveyId: StationaryAcousticEvent

  """
  Reads a single `Software` that is related to this `StationaryAcousticValue`.
  """
  softwareBySoftwareId: Software

  """
  Reads a single `Species` that is related to this `StationaryAcousticValue`.
  """
  speciesBySpeciesId: Species

  """An edge for our `StationaryAcousticValue`. May be used by Relay 1."""
  stationaryAcousticValueEdge(
    """The method to use when ordering `StationaryAcousticValue`."""
    orderBy: [StationaryAcousticValuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): StationaryAcousticValuesEdge
}

"""All input for the create `Survey` mutation."""
input CreateSurveyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Survey` to be created by this mutation."""
  survey: SurveyInput!
}

"""The output of our create `Survey` mutation."""
type CreateSurveyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Survey` that was created by this mutation."""
  survey: Survey

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Survey`. May be used by Relay 1."""
  surveyEdge(
    """The method to use when ordering `Survey`."""
    orderBy: [SurveysOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveysEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteClutterTypeById` mutation."""
input DeleteClutterTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteClutterType` mutation."""
input DeleteClutterTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ClutterType` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ClutterType` mutation."""
type DeleteClutterTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ClutterType` that was deleted by this mutation."""
  clutterType: ClutterType
  deletedClutterTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ClutterType`. May be used by Relay 1."""
  clutterTypeEdge(
    """The method to use when ordering `ClutterType`."""
    orderBy: [ClutterTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ClutterTypesEdge
}

"""All input for the `deleteColonyCountEventById` mutation."""
input DeleteColonyCountEventByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteColonyCountEvent` mutation."""
input DeleteColonyCountEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ColonyCountEvent` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ColonyCountEvent` mutation."""
type DeleteColonyCountEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ColonyCountEvent` that was deleted by this mutation."""
  colonyCountEvent: ColonyCountEvent
  deletedColonyCountEventId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `ColonyCountEvent`."""
  surveyBySurveyId: Survey

  """An edge for our `ColonyCountEvent`. May be used by Relay 1."""
  colonyCountEventEdge(
    """The method to use when ordering `ColonyCountEvent`."""
    orderBy: [ColonyCountEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ColonyCountEventsEdge
}

"""All input for the `deleteColonyCountSiteSectionEventById` mutation."""
input DeleteColonyCountSiteSectionEventByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteColonyCountSiteSectionEvent` mutation."""
input DeleteColonyCountSiteSectionEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ColonyCountSiteSectionEvent` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ColonyCountSiteSectionEvent` mutation."""
type DeleteColonyCountSiteSectionEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ColonyCountSiteSectionEvent` that was deleted by this mutation."""
  colonyCountSiteSectionEvent: ColonyCountSiteSectionEvent
  deletedColonyCountSiteSectionEventId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ColonyCountEvent` that is related to this `ColonyCountSiteSectionEvent`.
  """
  colonyCountEventByEventId: ColonyCountEvent

  """
  Reads a single `SiteSection` that is related to this `ColonyCountSiteSectionEvent`.
  """
  siteSectionBySiteSectionId: SiteSection

  """
  Reads a single `HowPdPresumed` that is related to this `ColonyCountSiteSectionEvent`.
  """
  howPdPresumedByHowPdPresumedId: HowPdPresumed

  """
  Reads a single `HowWnsPresumed` that is related to this `ColonyCountSiteSectionEvent`.
  """
  howWnsPresumedByHowWnsPresumedId: HowWnsPresumed

  """
  An edge for our `ColonyCountSiteSectionEvent`. May be used by Relay 1.
  """
  colonyCountSiteSectionEventEdge(
    """The method to use when ordering `ColonyCountSiteSectionEvent`."""
    orderBy: [ColonyCountSiteSectionEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ColonyCountSiteSectionEventsEdge
}

"""All input for the `deleteColonyCountSiteSectionValueById` mutation."""
input DeleteColonyCountSiteSectionValueByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteColonyCountSiteSectionValue` mutation."""
input DeleteColonyCountSiteSectionValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ColonyCountSiteSectionValue` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ColonyCountSiteSectionValue` mutation."""
type DeleteColonyCountSiteSectionValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ColonyCountSiteSectionValue` that was deleted by this mutation."""
  colonyCountSiteSectionValue: ColonyCountSiteSectionValue
  deletedColonyCountSiteSectionValueId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ColonyCountSiteSectionEvent` that is related to this `ColonyCountSiteSectionValue`.
  """
  colonyCountSiteSectionEventBySiteSectionEventId: ColonyCountSiteSectionEvent

  """
  Reads a single `Species` that is related to this `ColonyCountSiteSectionValue`.
  """
  speciesBySpeciesId: Species

  """
  Reads a single `PresumedCauseDeath` that is related to this `ColonyCountSiteSectionValue`.
  """
  presumedCauseDeathByPresumedCauseDeathId: PresumedCauseDeath

  """
  Reads a single `CountMethod` that is related to this `ColonyCountSiteSectionValue`.
  """
  countMethodByCountMethodId: CountMethod

  """
  Reads a single `CountConfidence` that is related to this `ColonyCountSiteSectionValue`.
  """
  countConfidenceByCountConfidenceId: CountConfidence

  """
  An edge for our `ColonyCountSiteSectionValue`. May be used by Relay 1.
  """
  colonyCountSiteSectionValueEdge(
    """The method to use when ordering `ColonyCountSiteSectionValue`."""
    orderBy: [ColonyCountSiteSectionValuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ColonyCountSiteSectionValuesEdge
}

"""All input for the `deleteCountConfidenceById` mutation."""
input DeleteCountConfidenceByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteCountConfidence` mutation."""
input DeleteCountConfidenceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CountConfidence` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CountConfidence` mutation."""
type DeleteCountConfidencePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CountConfidence` that was deleted by this mutation."""
  countConfidence: CountConfidence
  deletedCountConfidenceId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CountConfidence`. May be used by Relay 1."""
  countConfidenceEdge(
    """The method to use when ordering `CountConfidence`."""
    orderBy: [CountConfidencesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CountConfidencesEdge
}

"""All input for the `deleteCountMethodById` mutation."""
input DeleteCountMethodByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteCountMethod` mutation."""
input DeleteCountMethodInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CountMethod` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CountMethod` mutation."""
type DeleteCountMethodPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CountMethod` that was deleted by this mutation."""
  countMethod: CountMethod
  deletedCountMethodId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CountMethod`. May be used by Relay 1."""
  countMethodEdge(
    """The method to use when ordering `CountMethod`."""
    orderBy: [CountMethodsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CountMethodsEdge
}

"""All input for the `deleteDeviceById` mutation."""
input DeleteDeviceByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteDevice` mutation."""
input DeleteDeviceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Device` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Device` mutation."""
type DeleteDevicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Device` that was deleted by this mutation."""
  device: Device
  deletedDeviceId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `DeviceType` that is related to this `Device`."""
  deviceTypeByDeviceTypeId: DeviceType

  """Reads a single `MicrophoneType` that is related to this `Device`."""
  microphoneTypeByMicrophoneTypeId: MicrophoneType

  """
  Reads a single `MicrophoneHousingType` that is related to this `Device`.
  """
  microphoneHousingTypeByMicrophoneHousingTypeId: MicrophoneHousingType

  """An edge for our `Device`. May be used by Relay 1."""
  deviceEdge(
    """The method to use when ordering `Device`."""
    orderBy: [DevicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DevicesEdge
}

"""All input for the `deleteDeviceTypeById` mutation."""
input DeleteDeviceTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteDeviceType` mutation."""
input DeleteDeviceTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DeviceType` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `DeviceType` mutation."""
type DeleteDeviceTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DeviceType` that was deleted by this mutation."""
  deviceType: DeviceType
  deletedDeviceTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `DeviceType`. May be used by Relay 1."""
  deviceTypeEdge(
    """The method to use when ordering `DeviceType`."""
    orderBy: [DeviceTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DeviceTypesEdge
}

"""All input for the `deleteEnvironmentalDatumById` mutation."""
input DeleteEnvironmentalDatumByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteEnvironmentalDatum` mutation."""
input DeleteEnvironmentalDatumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EnvironmentalDatum` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `EnvironmentalDatum` mutation."""
type DeleteEnvironmentalDatumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EnvironmentalDatum` that was deleted by this mutation."""
  environmentalDatum: EnvironmentalDatum
  deletedEnvironmentalDatumId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LoggerType` that is related to this `EnvironmentalDatum`.
  """
  loggerTypeByLoggerTypeId: LoggerType

  """An edge for our `EnvironmentalDatum`. May be used by Relay 1."""
  environmentalDatumEdge(
    """The method to use when ordering `EnvironmentalDatum`."""
    orderBy: [EnvironmentalDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): EnvironmentalDataEdge
}

"""All input for the `deleteHabitatTypeById` mutation."""
input DeleteHabitatTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteHabitatType` mutation."""
input DeleteHabitatTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HabitatType` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `HabitatType` mutation."""
type DeleteHabitatTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HabitatType` that was deleted by this mutation."""
  habitatType: HabitatType
  deletedHabitatTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HabitatType`. May be used by Relay 1."""
  habitatTypeEdge(
    """The method to use when ordering `HabitatType`."""
    orderBy: [HabitatTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): HabitatTypesEdge
}

"""All input for the `deleteHowPdPresumedById` mutation."""
input DeleteHowPdPresumedByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteHowPdPresumed` mutation."""
input DeleteHowPdPresumedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HowPdPresumed` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `HowPdPresumed` mutation."""
type DeleteHowPdPresumedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HowPdPresumed` that was deleted by this mutation."""
  howPdPresumed: HowPdPresumed
  deletedHowPdPresumedId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HowPdPresumed`. May be used by Relay 1."""
  howPdPresumedEdge(
    """The method to use when ordering `HowPdPresumed`."""
    orderBy: [HowPdPresumedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): HowPdPresumedsEdge
}

"""All input for the `deleteHowWnsPresumedById` mutation."""
input DeleteHowWnsPresumedByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteHowWnsPresumed` mutation."""
input DeleteHowWnsPresumedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HowWnsPresumed` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `HowWnsPresumed` mutation."""
type DeleteHowWnsPresumedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HowWnsPresumed` that was deleted by this mutation."""
  howWnsPresumed: HowWnsPresumed
  deletedHowWnsPresumedId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HowWnsPresumed`. May be used by Relay 1."""
  howWnsPresumedEdge(
    """The method to use when ordering `HowWnsPresumed`."""
    orderBy: [HowWnsPresumedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): HowWnsPresumedsEdge
}

"""All input for the `deleteImageById` mutation."""
input DeleteImageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteImage` mutation."""
input DeleteImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Image` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Image` mutation."""
type DeleteImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was deleted by this mutation."""
  image: Image
  deletedImageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesEdge
}

"""All input for the `deleteLaboratoryById` mutation."""
input DeleteLaboratoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteLaboratory` mutation."""
input DeleteLaboratoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Laboratory` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Laboratory` mutation."""
type DeleteLaboratoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Laboratory` that was deleted by this mutation."""
  laboratory: Laboratory
  deletedLaboratoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Laboratory`. May be used by Relay 1."""
  laboratoryEdge(
    """The method to use when ordering `Laboratory`."""
    orderBy: [LaboratoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LaboratoriesEdge
}

"""All input for the `deleteLoggerTypeById` mutation."""
input DeleteLoggerTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteLoggerType` mutation."""
input DeleteLoggerTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LoggerType` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `LoggerType` mutation."""
type DeleteLoggerTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LoggerType` that was deleted by this mutation."""
  loggerType: LoggerType
  deletedLoggerTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LoggerType`. May be used by Relay 1."""
  loggerTypeEdge(
    """The method to use when ordering `LoggerType`."""
    orderBy: [LoggerTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LoggerTypesEdge
}

"""All input for the `deleteMicrophoneHousingTypeById` mutation."""
input DeleteMicrophoneHousingTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteMicrophoneHousingType` mutation."""
input DeleteMicrophoneHousingTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MicrophoneHousingType` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `MicrophoneHousingType` mutation."""
type DeleteMicrophoneHousingTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MicrophoneHousingType` that was deleted by this mutation."""
  microphoneHousingType: MicrophoneHousingType
  deletedMicrophoneHousingTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MicrophoneHousingType`. May be used by Relay 1."""
  microphoneHousingTypeEdge(
    """The method to use when ordering `MicrophoneHousingType`."""
    orderBy: [MicrophoneHousingTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MicrophoneHousingTypesEdge
}

"""All input for the `deleteMicrophoneOrientationById` mutation."""
input DeleteMicrophoneOrientationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteMicrophoneOrientation` mutation."""
input DeleteMicrophoneOrientationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MicrophoneOrientation` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `MicrophoneOrientation` mutation."""
type DeleteMicrophoneOrientationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MicrophoneOrientation` that was deleted by this mutation."""
  microphoneOrientation: MicrophoneOrientation
  deletedMicrophoneOrientationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MicrophoneOrientation`. May be used by Relay 1."""
  microphoneOrientationEdge(
    """The method to use when ordering `MicrophoneOrientation`."""
    orderBy: [MicrophoneOrientationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MicrophoneOrientationsEdge
}

"""All input for the `deleteMicrophoneTypeById` mutation."""
input DeleteMicrophoneTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteMicrophoneType` mutation."""
input DeleteMicrophoneTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MicrophoneType` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `MicrophoneType` mutation."""
type DeleteMicrophoneTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MicrophoneType` that was deleted by this mutation."""
  microphoneType: MicrophoneType
  deletedMicrophoneTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MicrophoneType`. May be used by Relay 1."""
  microphoneTypeEdge(
    """The method to use when ordering `MicrophoneType`."""
    orderBy: [MicrophoneTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MicrophoneTypesEdge
}

"""All input for the `deleteMobileAcousticEventById` mutation."""
input DeleteMobileAcousticEventByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteMobileAcousticEvent` mutation."""
input DeleteMobileAcousticEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MobileAcousticEvent` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `MobileAcousticEvent` mutation."""
type DeleteMobileAcousticEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MobileAcousticEvent` that was deleted by this mutation."""
  mobileAcousticEvent: MobileAcousticEvent
  deletedMobileAcousticEventId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Survey` that is related to this `MobileAcousticEvent`.
  """
  surveyBySurveyId: Survey

  """
  Reads a single `Device` that is related to this `MobileAcousticEvent`.
  """
  deviceByDeviceId: Device

  """
  Reads a single `HabitatType` that is related to this `MobileAcousticEvent`.
  """
  habitatTypeByHabitatTypeId: HabitatType

  """An edge for our `MobileAcousticEvent`. May be used by Relay 1."""
  mobileAcousticEventEdge(
    """The method to use when ordering `MobileAcousticEvent`."""
    orderBy: [MobileAcousticEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MobileAcousticEventsEdge
}

"""All input for the `deleteMobileAcousticValueById` mutation."""
input DeleteMobileAcousticValueByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteMobileAcousticValue` mutation."""
input DeleteMobileAcousticValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MobileAcousticValue` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `MobileAcousticValue` mutation."""
type DeleteMobileAcousticValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MobileAcousticValue` that was deleted by this mutation."""
  mobileAcousticValue: MobileAcousticValue
  deletedMobileAcousticValueId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Software` that is related to this `MobileAcousticValue`.
  """
  softwareBySoftwareId: Software

  """
  Reads a single `Species` that is related to this `MobileAcousticValue`.
  """
  speciesBySpeciesId: Species

  """An edge for our `MobileAcousticValue`. May be used by Relay 1."""
  mobileAcousticValueEdge(
    """The method to use when ordering `MobileAcousticValue`."""
    orderBy: [MobileAcousticValuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MobileAcousticValuesEdge
}

"""All input for the `deleteOrganismCountById` mutation."""
input DeleteOrganismCountByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteOrganismCount` mutation."""
input DeleteOrganismCountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrganismCount` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `OrganismCount` mutation."""
type DeleteOrganismCountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrganismCount` that was deleted by this mutation."""
  organismCount: OrganismCount
  deletedOrganismCountId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `OrganismCount`. May be used by Relay 1."""
  organismCountEdge(
    """The method to use when ordering `OrganismCount`."""
    orderBy: [OrganismCountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganismCountsEdge
}

"""All input for the `deletePresumedCauseDeathById` mutation."""
input DeletePresumedCauseDeathByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deletePresumedCauseDeath` mutation."""
input DeletePresumedCauseDeathInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PresumedCauseDeath` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `PresumedCauseDeath` mutation."""
type DeletePresumedCauseDeathPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PresumedCauseDeath` that was deleted by this mutation."""
  presumedCauseDeath: PresumedCauseDeath
  deletedPresumedCauseDeathId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PresumedCauseDeath`. May be used by Relay 1."""
  presumedCauseDeathEdge(
    """The method to use when ordering `PresumedCauseDeath`."""
    orderBy: [PresumedCauseDeathsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PresumedCauseDeathsEdge
}

"""All input for the `deleteProjectReferenceById` mutation."""
input DeleteProjectReferenceByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteProjectReference` mutation."""
input DeleteProjectReferenceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectReference` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ProjectReference` mutation."""
type DeleteProjectReferencePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectReference` that was deleted by this mutation."""
  projectReference: ProjectReference
  deletedProjectReferenceId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProjectReference`. May be used by Relay 1."""
  projectReferenceEdge(
    """The method to use when ordering `ProjectReference`."""
    orderBy: [ProjectReferencesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectReferencesEdge
}

"""All input for the `deleteProjectSiteByProjectIdAndSiteId` mutation."""
input DeleteProjectSiteByProjectIdAndSiteIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int!
  siteId: Int!
}

"""All input for the `deleteProjectSite` mutation."""
input DeleteProjectSiteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectSite` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ProjectSite` mutation."""
type DeleteProjectSitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectSite` that was deleted by this mutation."""
  projectSite: ProjectSite
  deletedProjectSiteId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProjectReference` that is related to this `ProjectSite`.
  """
  projectReferenceByProjectId: ProjectReference

  """Reads a single `Site` that is related to this `ProjectSite`."""
  siteBySiteId: Site

  """An edge for our `ProjectSite`. May be used by Relay 1."""
  projectSiteEdge(
    """The method to use when ordering `ProjectSite`."""
    orderBy: [ProjectSitesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectSitesEdge
}

"""All input for the `deleteSampleLevelInformationById` mutation."""
input DeleteSampleLevelInformationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSampleLevelInformation` mutation."""
input DeleteSampleLevelInformationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SampleLevelInformation` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SampleLevelInformation` mutation."""
type DeleteSampleLevelInformationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SampleLevelInformation` that was deleted by this mutation."""
  sampleLevelInformation: SampleLevelInformation
  deletedSampleLevelInformationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SampleType` that is related to this `SampleLevelInformation`.
  """
  sampleTypeBySampleTypeId: SampleType

  """
  Reads a single `Laboratory` that is related to this `SampleLevelInformation`.
  """
  laboratoryByLabWhereSampleSentId: Laboratory

  """An edge for our `SampleLevelInformation`. May be used by Relay 1."""
  sampleLevelInformationEdge(
    """The method to use when ordering `SampleLevelInformation`."""
    orderBy: [SampleLevelInformationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SampleLevelInformationsEdge
}

"""All input for the `deleteSampleTypeById` mutation."""
input DeleteSampleTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSampleType` mutation."""
input DeleteSampleTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SampleType` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SampleType` mutation."""
type DeleteSampleTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SampleType` that was deleted by this mutation."""
  sampleType: SampleType
  deletedSampleTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SampleType`. May be used by Relay 1."""
  sampleTypeEdge(
    """The method to use when ordering `SampleType`."""
    orderBy: [SampleTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SampleTypesEdge
}

"""All input for the `deleteSiteById` mutation."""
input DeleteSiteByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSite` mutation."""
input DeleteSiteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Site` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSiteLevelById` mutation."""
input DeleteSiteLevelByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSiteLevel` mutation."""
input DeleteSiteLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SiteLevel` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SiteLevel` mutation."""
type DeleteSiteLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteLevel` that was deleted by this mutation."""
  siteLevel: SiteLevel
  deletedSiteLevelId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SiteLevel`. May be used by Relay 1."""
  siteLevelEdge(
    """The method to use when ordering `SiteLevel`."""
    orderBy: [SiteLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteLevelsEdge
}

"""All input for the `deleteSiteMaterialById` mutation."""
input DeleteSiteMaterialByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSiteMaterial` mutation."""
input DeleteSiteMaterialInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SiteMaterial` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SiteMaterial` mutation."""
type DeleteSiteMaterialPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteMaterial` that was deleted by this mutation."""
  siteMaterial: SiteMaterial
  deletedSiteMaterialId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SiteMaterial`. May be used by Relay 1."""
  siteMaterialEdge(
    """The method to use when ordering `SiteMaterial`."""
    orderBy: [SiteMaterialsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteMaterialsEdge
}

"""
All input for the `deleteSiteOrganismCountBySiteIdAndOrganismCountId` mutation.
"""
input DeleteSiteOrganismCountBySiteIdAndOrganismCountIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  siteId: Int!
  organismCountId: Int!
}

"""All input for the `deleteSiteOrganismCount` mutation."""
input DeleteSiteOrganismCountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SiteOrganismCount` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SiteOrganismCount` mutation."""
type DeleteSiteOrganismCountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteOrganismCount` that was deleted by this mutation."""
  siteOrganismCount: SiteOrganismCount
  deletedSiteOrganismCountId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Site` that is related to this `SiteOrganismCount`."""
  siteBySiteId: Site

  """
  Reads a single `OrganismCount` that is related to this `SiteOrganismCount`.
  """
  organismCountByOrganismCountId: OrganismCount

  """An edge for our `SiteOrganismCount`. May be used by Relay 1."""
  siteOrganismCountEdge(
    """The method to use when ordering `SiteOrganismCount`."""
    orderBy: [SiteOrganismCountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteOrganismCountsEdge
}

"""The output of our delete `Site` mutation."""
type DeleteSitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Site` that was deleted by this mutation."""
  site: Site
  deletedSiteId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SiteType` that is related to this `Site`."""
  siteTypeBySiteTypeId: SiteType

  """Reads a single `SiteMaterial` that is related to this `Site`."""
  siteMaterialBySiteMaterialId: SiteMaterial

  """Reads a single `SiteUse` that is related to this `Site`."""
  siteUseBySiteUseId: SiteUse

  """Reads a single `SiteSize` that is related to this `Site`."""
  siteSizeBySiteSizeId: SiteSize

  """An edge for our `Site`. May be used by Relay 1."""
  siteEdge(
    """The method to use when ordering `Site`."""
    orderBy: [SitesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SitesEdge
}

"""All input for the `deleteSiteSectionById` mutation."""
input DeleteSiteSectionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSiteSection` mutation."""
input DeleteSiteSectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SiteSection` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SiteSection` mutation."""
type DeleteSiteSectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteSection` that was deleted by this mutation."""
  siteSection: SiteSection
  deletedSiteSectionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Site` that is related to this `SiteSection`."""
  siteBySiteId: Site

  """Reads a single `SiteLevel` that is related to this `SiteSection`."""
  siteLevelBySiteLevelId: SiteLevel

  """An edge for our `SiteSection`. May be used by Relay 1."""
  siteSectionEdge(
    """The method to use when ordering `SiteSection`."""
    orderBy: [SiteSectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteSectionsEdge
}

"""All input for the `deleteSiteSizeById` mutation."""
input DeleteSiteSizeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSiteSize` mutation."""
input DeleteSiteSizeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SiteSize` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SiteSize` mutation."""
type DeleteSiteSizePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteSize` that was deleted by this mutation."""
  siteSize: SiteSize
  deletedSiteSizeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SiteSize`. May be used by Relay 1."""
  siteSizeEdge(
    """The method to use when ordering `SiteSize`."""
    orderBy: [SiteSizesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteSizesEdge
}

"""All input for the `deleteSiteTypeById` mutation."""
input DeleteSiteTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSiteType` mutation."""
input DeleteSiteTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SiteType` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SiteType` mutation."""
type DeleteSiteTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteType` that was deleted by this mutation."""
  siteType: SiteType
  deletedSiteTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SiteType`. May be used by Relay 1."""
  siteTypeEdge(
    """The method to use when ordering `SiteType`."""
    orderBy: [SiteTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteTypesEdge
}

"""All input for the `deleteSiteUseById` mutation."""
input DeleteSiteUseByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSiteUse` mutation."""
input DeleteSiteUseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SiteUse` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SiteUse` mutation."""
type DeleteSiteUsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteUse` that was deleted by this mutation."""
  siteUse: SiteUse
  deletedSiteUseId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SiteUse`. May be used by Relay 1."""
  siteUseEdge(
    """The method to use when ordering `SiteUse`."""
    orderBy: [SiteUsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteUsesEdge
}

"""All input for the `deleteSoftwareById` mutation."""
input DeleteSoftwareByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSoftware` mutation."""
input DeleteSoftwareInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Software` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Software` mutation."""
type DeleteSoftwarePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Software` that was deleted by this mutation."""
  software: Software
  deletedSoftwareId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Software`. May be used by Relay 1."""
  softwareEdge(
    """The method to use when ordering `Software`."""
    orderBy: [SoftwaresOrderBy!] = [PRIMARY_KEY_ASC]
  ): SoftwaresEdge
}

"""All input for the `deleteSpeciesById` mutation."""
input DeleteSpeciesByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSpecies` mutation."""
input DeleteSpeciesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Species` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Species` mutation."""
type DeleteSpeciesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Species` that was deleted by this mutation."""
  species: Species
  deletedSpeciesId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Species`. May be used by Relay 1."""
  speciesEdge(
    """The method to use when ordering `Species`."""
    orderBy: [SpeciesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpeciesEdge
}

"""All input for the `deleteStationaryAcousticEventById` mutation."""
input DeleteStationaryAcousticEventByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteStationaryAcousticEvent` mutation."""
input DeleteStationaryAcousticEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StationaryAcousticEvent` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `StationaryAcousticEvent` mutation."""
type DeleteStationaryAcousticEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StationaryAcousticEvent` that was deleted by this mutation."""
  stationaryAcousticEvent: StationaryAcousticEvent
  deletedStationaryAcousticEventId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Survey` that is related to this `StationaryAcousticEvent`.
  """
  surveyBySurveyId: Survey

  """
  Reads a single `Device` that is related to this `StationaryAcousticEvent`.
  """
  deviceByDeviceId: Device

  """
  Reads a single `MicrophoneOrientation` that is related to this `StationaryAcousticEvent`.
  """
  microphoneOrientationByMicrophoneOrientationId: MicrophoneOrientation

  """
  Reads a single `ClutterType` that is related to this `StationaryAcousticEvent`.
  """
  clutterTypeByClutterTypeId: ClutterType

  """An edge for our `StationaryAcousticEvent`. May be used by Relay 1."""
  stationaryAcousticEventEdge(
    """The method to use when ordering `StationaryAcousticEvent`."""
    orderBy: [StationaryAcousticEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): StationaryAcousticEventsEdge
}

"""All input for the `deleteStationaryAcousticImageById` mutation."""
input DeleteStationaryAcousticImageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteStationaryAcousticImage` mutation."""
input DeleteStationaryAcousticImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StationaryAcousticImage` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `StationaryAcousticImage` mutation."""
type DeleteStationaryAcousticImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StationaryAcousticImage` that was deleted by this mutation."""
  stationaryAcousticImage: StationaryAcousticImage
  deletedStationaryAcousticImageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Image` that is related to this `StationaryAcousticImage`.
  """
  imageByImageId: Image

  """
  Reads a single `StationaryAcousticEvent` that is related to this `StationaryAcousticImage`.
  """
  stationaryAcousticEventByStationaryAcousticEventId: StationaryAcousticEvent

  """An edge for our `StationaryAcousticImage`. May be used by Relay 1."""
  stationaryAcousticImageEdge(
    """The method to use when ordering `StationaryAcousticImage`."""
    orderBy: [StationaryAcousticImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): StationaryAcousticImagesEdge
}

"""All input for the `deleteStationaryAcousticValueById` mutation."""
input DeleteStationaryAcousticValueByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteStationaryAcousticValue` mutation."""
input DeleteStationaryAcousticValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StationaryAcousticValue` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `StationaryAcousticValue` mutation."""
type DeleteStationaryAcousticValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StationaryAcousticValue` that was deleted by this mutation."""
  stationaryAcousticValue: StationaryAcousticValue
  deletedStationaryAcousticValueId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `StationaryAcousticEvent` that is related to this `StationaryAcousticValue`.
  """
  stationaryAcousticEventBySaSurveyId: StationaryAcousticEvent

  """
  Reads a single `Software` that is related to this `StationaryAcousticValue`.
  """
  softwareBySoftwareId: Software

  """
  Reads a single `Species` that is related to this `StationaryAcousticValue`.
  """
  speciesBySpeciesId: Species

  """An edge for our `StationaryAcousticValue`. May be used by Relay 1."""
  stationaryAcousticValueEdge(
    """The method to use when ordering `StationaryAcousticValue`."""
    orderBy: [StationaryAcousticValuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): StationaryAcousticValuesEdge
}

"""All input for the `deleteSurveyById` mutation."""
input DeleteSurveyByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSurvey` mutation."""
input DeleteSurveyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Survey` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Survey` mutation."""
type DeleteSurveyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Survey` that was deleted by this mutation."""
  survey: Survey
  deletedSurveyId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Survey`. May be used by Relay 1."""
  surveyEdge(
    """The method to use when ordering `Survey`."""
    orderBy: [SurveysOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveysEdge
}

type Device implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  deviceTypeId: Int!
  serialNumber: String
  model: String
  manufacturer: String
  microphoneTypeId: Int
  microphoneHousingTypeId: Int

  """Reads a single `DeviceType` that is related to this `Device`."""
  deviceTypeByDeviceTypeId: DeviceType

  """Reads a single `MicrophoneType` that is related to this `Device`."""
  microphoneTypeByMicrophoneTypeId: MicrophoneType

  """
  Reads a single `MicrophoneHousingType` that is related to this `Device`.
  """
  microphoneHousingTypeByMicrophoneHousingTypeId: MicrophoneHousingType

  """Reads and enables pagination through a set of `MobileAcousticEvent`."""
  mobileAcousticEventsByDeviceId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MobileAcousticEvent`."""
    orderBy: [MobileAcousticEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MobileAcousticEventCondition
  ): MobileAcousticEventsConnection!

  """
  Reads and enables pagination through a set of `StationaryAcousticEvent`.
  """
  stationaryAcousticEventsByDeviceId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StationaryAcousticEvent`."""
    orderBy: [StationaryAcousticEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StationaryAcousticEventCondition
  ): StationaryAcousticEventsConnection!
}

"""
A condition to be used against `Device` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DeviceCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `deviceTypeId` field."""
  deviceTypeId: Int

  """Checks for equality with the object’s `serialNumber` field."""
  serialNumber: String

  """Checks for equality with the object’s `model` field."""
  model: String

  """Checks for equality with the object’s `manufacturer` field."""
  manufacturer: String

  """Checks for equality with the object’s `microphoneTypeId` field."""
  microphoneTypeId: Int

  """
  Checks for equality with the object’s `microphoneHousingTypeId` field.
  """
  microphoneHousingTypeId: Int
}

"""An input for mutations affecting `Device`"""
input DeviceInput {
  id: Int
  deviceTypeId: Int!
  serialNumber: String
  model: String
  manufacturer: String
  microphoneTypeId: Int
  microphoneHousingTypeId: Int
}

"""
Represents an update to a `Device`. Fields that are set will be updated.
"""
input DevicePatch {
  id: Int
  deviceTypeId: Int
  serialNumber: String
  model: String
  manufacturer: String
  microphoneTypeId: Int
  microphoneHousingTypeId: Int
}

"""A connection to a list of `Device` values."""
type DevicesConnection {
  """A list of `Device` objects."""
  nodes: [Device]!

  """
  A list of edges which contains the `Device` and cursor to aid in pagination.
  """
  edges: [DevicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Device` you could get from the connection."""
  totalCount: Int
}

"""A `Device` edge in the connection."""
type DevicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Device` at the end of the edge."""
  node: Device
}

"""Methods to use when ordering `Device`."""
enum DevicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DEVICE_TYPE_ID_ASC
  DEVICE_TYPE_ID_DESC
  SERIAL_NUMBER_ASC
  SERIAL_NUMBER_DESC
  MODEL_ASC
  MODEL_DESC
  MANUFACTURER_ASC
  MANUFACTURER_DESC
  MICROPHONE_TYPE_ID_ASC
  MICROPHONE_TYPE_ID_DESC
  MICROPHONE_HOUSING_TYPE_ID_ASC
  MICROPHONE_HOUSING_TYPE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Stores the type of device for either stationary or acoustic monitoring survey
"""
type DeviceType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  description: String!

  """Reads and enables pagination through a set of `Device`."""
  devicesByDeviceTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Device`."""
    orderBy: [DevicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DeviceCondition
  ): DevicesConnection!
}

"""
A condition to be used against `DeviceType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DeviceTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""An input for mutations affecting `DeviceType`"""
input DeviceTypeInput {
  id: Int
  description: String!
}

"""
Represents an update to a `DeviceType`. Fields that are set will be updated.
"""
input DeviceTypePatch {
  id: Int
  description: String
}

"""A connection to a list of `DeviceType` values."""
type DeviceTypesConnection {
  """A list of `DeviceType` objects."""
  nodes: [DeviceType]!

  """
  A list of edges which contains the `DeviceType` and cursor to aid in pagination.
  """
  edges: [DeviceTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DeviceType` you could get from the connection."""
  totalCount: Int
}

"""A `DeviceType` edge in the connection."""
type DeviceTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DeviceType` at the end of the edge."""
  node: DeviceType
}

"""Methods to use when ordering `DeviceType`."""
enum DeviceTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A `Int` edge in the connection."""
type DistinctSurveyProjectIdEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Int` at the end of the edge."""
  node: Int
}

"""A connection to a list of `Int` values."""
type DistinctSurveyProjectIdsConnection {
  """A list of `Int` objects."""
  nodes: [Int]!

  """
  A list of edges which contains the `Int` and cursor to aid in pagination.
  """
  edges: [DistinctSurveyProjectIdEdge!]!
}

"""A connection to a list of `EnvironmentalDatum` values."""
type EnvironmentalDataConnection {
  """A list of `EnvironmentalDatum` objects."""
  nodes: [EnvironmentalDatum]!

  """
  A list of edges which contains the `EnvironmentalDatum` and cursor to aid in pagination.
  """
  edges: [EnvironmentalDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EnvironmentalDatum` you could get from the connection.
  """
  totalCount: Int
}

"""A `EnvironmentalDatum` edge in the connection."""
type EnvironmentalDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EnvironmentalDatum` at the end of the edge."""
  node: EnvironmentalDatum
}

"""Methods to use when ordering `EnvironmentalDatum`."""
enum EnvironmentalDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SITE_SECTION_ID_ASC
  SITE_SECTION_ID_DESC
  DATE_TIME_ASC
  DATE_TIME_DESC
  LOGGER_TYPE_ID_ASC
  LOGGER_TYPE_ID_DESC
  LOGGER_SERIAL_NO_ASC
  LOGGER_SERIAL_NO_DESC
  RH_ASC
  RH_DESC
  TEMP_ASC
  TEMP_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""This table is for environmental data (rh/temp) logged over time"""
type EnvironmentalDatum implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  siteSectionId: Int!
  dateTime: Datetime
  loggerTypeId: Int

  """
  Logger id is the serial ID that identifies each logging device; it is provided by the logger company
  """
  loggerSerialNo: String
  rh: Int
  temp: Int
  comments: String

  """
  Reads a single `LoggerType` that is related to this `EnvironmentalDatum`.
  """
  loggerTypeByLoggerTypeId: LoggerType
}

"""
A condition to be used against `EnvironmentalDatum` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EnvironmentalDatumCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `siteSectionId` field."""
  siteSectionId: Int

  """Checks for equality with the object’s `dateTime` field."""
  dateTime: Datetime

  """Checks for equality with the object’s `loggerTypeId` field."""
  loggerTypeId: Int

  """Checks for equality with the object’s `loggerSerialNo` field."""
  loggerSerialNo: String

  """Checks for equality with the object’s `rh` field."""
  rh: Int

  """Checks for equality with the object’s `temp` field."""
  temp: Int

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `EnvironmentalDatum`"""
input EnvironmentalDatumInput {
  id: Int
  siteSectionId: Int!
  dateTime: Datetime
  loggerTypeId: Int

  """
  Logger id is the serial ID that identifies each logging device; it is provided by the logger company
  """
  loggerSerialNo: String
  rh: Int
  temp: Int
  comments: String
}

"""
Represents an update to a `EnvironmentalDatum`. Fields that are set will be updated.
"""
input EnvironmentalDatumPatch {
  id: Int
  siteSectionId: Int
  dateTime: Datetime
  loggerTypeId: Int

  """
  Logger id is the serial ID that identifies each logging device; it is provided by the logger company
  """
  loggerSerialNo: String
  rh: Int
  temp: Int
  comments: String
}

"""
Reference table of habitats across which mobile acoustic surveys cross
"""
type HabitatType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  description: String

  """Reads and enables pagination through a set of `MobileAcousticEvent`."""
  mobileAcousticEventsByHabitatTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MobileAcousticEvent`."""
    orderBy: [MobileAcousticEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MobileAcousticEventCondition
  ): MobileAcousticEventsConnection!
}

"""
A condition to be used against `HabitatType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input HabitatTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""An input for mutations affecting `HabitatType`"""
input HabitatTypeInput {
  id: Int
  description: String
}

"""
Represents an update to a `HabitatType`. Fields that are set will be updated.
"""
input HabitatTypePatch {
  id: Int
  description: String
}

"""A connection to a list of `HabitatType` values."""
type HabitatTypesConnection {
  """A list of `HabitatType` objects."""
  nodes: [HabitatType]!

  """
  A list of edges which contains the `HabitatType` and cursor to aid in pagination.
  """
  edges: [HabitatTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `HabitatType` you could get from the connection."""
  totalCount: Int
}

"""A `HabitatType` edge in the connection."""
type HabitatTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `HabitatType` at the end of the edge."""
  node: HabitatType
}

"""Methods to use when ordering `HabitatType`."""
enum HabitatTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
This is a drop-down list of potential ways Pd is presumed to be present at a
site, including the options: visible fungus, qPCR, mortality event,
histopathology-confirmed Pd sample, aberrant behavior - bats flying outside in
winter, aberrant behavior - bats roosting at site entrance/abnormal locations
"""
type HowPdPresumed implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  method: String
  comments: String

  """
  Reads and enables pagination through a set of `ColonyCountSiteSectionEvent`.
  """
  colonyCountSiteSectionEventsByHowPdPresumedId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ColonyCountSiteSectionEvent`."""
    orderBy: [ColonyCountSiteSectionEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ColonyCountSiteSectionEventCondition
  ): ColonyCountSiteSectionEventsConnection!
}

"""
A condition to be used against `HowPdPresumed` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input HowPdPresumedCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `method` field."""
  method: String

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `HowPdPresumed`"""
input HowPdPresumedInput {
  id: Int
  method: String
  comments: String
}

"""
Represents an update to a `HowPdPresumed`. Fields that are set will be updated.
"""
input HowPdPresumedPatch {
  id: Int
  method: String
  comments: String
}

"""A connection to a list of `HowPdPresumed` values."""
type HowPdPresumedsConnection {
  """A list of `HowPdPresumed` objects."""
  nodes: [HowPdPresumed]!

  """
  A list of edges which contains the `HowPdPresumed` and cursor to aid in pagination.
  """
  edges: [HowPdPresumedsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `HowPdPresumed` you could get from the connection."""
  totalCount: Int
}

"""A `HowPdPresumed` edge in the connection."""
type HowPdPresumedsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `HowPdPresumed` at the end of the edge."""
  node: HowPdPresumed
}

"""Methods to use when ordering `HowPdPresumed`."""
enum HowPdPresumedsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  METHOD_ASC
  METHOD_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
This is a drop-down list of potential ways WNS is presumed to be present at a
site, including the options: visible fungus, qPCR, mortality event,
histopathology-confirmed Pd sample, aberrant behavior - bats flying outside in
winter, aberrant behavior - bats roosting at site entrance/abnormal locations
"""
type HowWnsPresumed implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  method: String
  comments: String

  """
  Reads and enables pagination through a set of `ColonyCountSiteSectionEvent`.
  """
  colonyCountSiteSectionEventsByHowWnsPresumedId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ColonyCountSiteSectionEvent`."""
    orderBy: [ColonyCountSiteSectionEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ColonyCountSiteSectionEventCondition
  ): ColonyCountSiteSectionEventsConnection!
}

"""
A condition to be used against `HowWnsPresumed` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input HowWnsPresumedCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `method` field."""
  method: String

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `HowWnsPresumed`"""
input HowWnsPresumedInput {
  id: Int
  method: String
  comments: String
}

"""
Represents an update to a `HowWnsPresumed`. Fields that are set will be updated.
"""
input HowWnsPresumedPatch {
  id: Int
  method: String
  comments: String
}

"""A connection to a list of `HowWnsPresumed` values."""
type HowWnsPresumedsConnection {
  """A list of `HowWnsPresumed` objects."""
  nodes: [HowWnsPresumed]!

  """
  A list of edges which contains the `HowWnsPresumed` and cursor to aid in pagination.
  """
  edges: [HowWnsPresumedsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `HowWnsPresumed` you could get from the connection.
  """
  totalCount: Int
}

"""A `HowWnsPresumed` edge in the connection."""
type HowWnsPresumedsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `HowWnsPresumed` at the end of the edge."""
  node: HowWnsPresumed
}

"""Methods to use when ordering `HowWnsPresumed`."""
enum HowWnsPresumedsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  METHOD_ASC
  METHOD_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Table for storing references to images taken during surveys - images to be stored in S3
"""
type Image implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  imageType: String
  fileType: String

  """
  Reads and enables pagination through a set of `StationaryAcousticImage`.
  """
  stationaryAcousticImagesByImageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StationaryAcousticImage`."""
    orderBy: [StationaryAcousticImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StationaryAcousticImageCondition
  ): StationaryAcousticImagesConnection!
}

"""
A condition to be used against `Image` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ImageCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `imageType` field."""
  imageType: String

  """Checks for equality with the object’s `fileType` field."""
  fileType: String
}

"""An input for mutations affecting `Image`"""
input ImageInput {
  id: Int
  imageType: String
  fileType: String
}

"""
Represents an update to a `Image`. Fields that are set will be updated.
"""
input ImagePatch {
  id: Int
  imageType: String
  fileType: String
}

"""A connection to a list of `Image` values."""
type ImagesConnection {
  """A list of `Image` objects."""
  nodes: [Image]!

  """
  A list of edges which contains the `Image` and cursor to aid in pagination.
  """
  edges: [ImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Image` you could get from the connection."""
  totalCount: Int
}

"""A `Image` edge in the connection."""
type ImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Image` at the end of the edge."""
  node: Image
}

"""Methods to use when ordering `Image`."""
enum ImagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  IMAGE_TYPE_ASC
  IMAGE_TYPE_DESC
  FILE_TYPE_ASC
  FILE_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Laboratory` values."""
type LaboratoriesConnection {
  """A list of `Laboratory` objects."""
  nodes: [Laboratory]!

  """
  A list of edges which contains the `Laboratory` and cursor to aid in pagination.
  """
  edges: [LaboratoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Laboratory` you could get from the connection."""
  totalCount: Int
}

"""A `Laboratory` edge in the connection."""
type LaboratoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Laboratory` at the end of the edge."""
  node: Laboratory
}

"""Methods to use when ordering `Laboratory`."""
enum LaboratoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Table provides a list of labs where samples were sent - e.g. National Wildlife
Health Center, Jeff Foster (NAU), processed myself, other?
"""
type Laboratory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  comments: String

  """
  Reads and enables pagination through a set of `SampleLevelInformation`.
  """
  sampleLevelInformationsByLabWhereSampleSentId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampleLevelInformation`."""
    orderBy: [SampleLevelInformationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampleLevelInformationCondition
  ): SampleLevelInformationsConnection!
}

"""
A condition to be used against `Laboratory` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LaboratoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `Laboratory`"""
input LaboratoryInput {
  id: Int
  name: String!
  comments: String
}

"""
Represents an update to a `Laboratory`. Fields that are set will be updated.
"""
input LaboratoryPatch {
  id: Int
  name: String
  comments: String
}

"""
Logger type specifices instrument used to log environmental data (rh/temp);
options include iButton with common model types, HOBO loggers with model types
"""
type LoggerType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  instrument: String
  comments: String

  """Reads and enables pagination through a set of `EnvironmentalDatum`."""
  environmentalDataByLoggerTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EnvironmentalDatum`."""
    orderBy: [EnvironmentalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EnvironmentalDatumCondition
  ): EnvironmentalDataConnection!
}

"""
A condition to be used against `LoggerType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LoggerTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `instrument` field."""
  instrument: String

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `LoggerType`"""
input LoggerTypeInput {
  id: Int
  instrument: String
  comments: String
}

"""
Represents an update to a `LoggerType`. Fields that are set will be updated.
"""
input LoggerTypePatch {
  id: Int
  instrument: String
  comments: String
}

"""A connection to a list of `LoggerType` values."""
type LoggerTypesConnection {
  """A list of `LoggerType` objects."""
  nodes: [LoggerType]!

  """
  A list of edges which contains the `LoggerType` and cursor to aid in pagination.
  """
  edges: [LoggerTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LoggerType` you could get from the connection."""
  totalCount: Int
}

"""A `LoggerType` edge in the connection."""
type LoggerTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LoggerType` at the end of the edge."""
  node: LoggerType
}

"""Methods to use when ordering `LoggerType`."""
enum LoggerTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  INSTRUMENT_ASC
  INSTRUMENT_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Stores the microphone housing types for either stationary or acoustic monitoring survey
"""
type MicrophoneHousingType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  description: String

  """Reads and enables pagination through a set of `Device`."""
  devicesByMicrophoneHousingTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Device`."""
    orderBy: [DevicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DeviceCondition
  ): DevicesConnection!
}

"""
A condition to be used against `MicrophoneHousingType` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input MicrophoneHousingTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""An input for mutations affecting `MicrophoneHousingType`"""
input MicrophoneHousingTypeInput {
  id: Int
  description: String
}

"""
Represents an update to a `MicrophoneHousingType`. Fields that are set will be updated.
"""
input MicrophoneHousingTypePatch {
  id: Int
  description: String
}

"""A connection to a list of `MicrophoneHousingType` values."""
type MicrophoneHousingTypesConnection {
  """A list of `MicrophoneHousingType` objects."""
  nodes: [MicrophoneHousingType]!

  """
  A list of edges which contains the `MicrophoneHousingType` and cursor to aid in pagination.
  """
  edges: [MicrophoneHousingTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MicrophoneHousingType` you could get from the connection.
  """
  totalCount: Int
}

"""A `MicrophoneHousingType` edge in the connection."""
type MicrophoneHousingTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MicrophoneHousingType` at the end of the edge."""
  node: MicrophoneHousingType
}

"""Methods to use when ordering `MicrophoneHousingType`."""
enum MicrophoneHousingTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Table to store the microphone orientation by the 4 cardinal directions and 4
intermediate directions. Field "short_name" is for the abbreviation
"""
type MicrophoneOrientation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  shortName: String
  description: String

  """
  Reads and enables pagination through a set of `StationaryAcousticEvent`.
  """
  stationaryAcousticEventsByMicrophoneOrientationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StationaryAcousticEvent`."""
    orderBy: [StationaryAcousticEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StationaryAcousticEventCondition
  ): StationaryAcousticEventsConnection!
}

"""
A condition to be used against `MicrophoneOrientation` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input MicrophoneOrientationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `shortName` field."""
  shortName: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""An input for mutations affecting `MicrophoneOrientation`"""
input MicrophoneOrientationInput {
  id: Int
  shortName: String
  description: String
}

"""
Represents an update to a `MicrophoneOrientation`. Fields that are set will be updated.
"""
input MicrophoneOrientationPatch {
  id: Int
  shortName: String
  description: String
}

"""A connection to a list of `MicrophoneOrientation` values."""
type MicrophoneOrientationsConnection {
  """A list of `MicrophoneOrientation` objects."""
  nodes: [MicrophoneOrientation]!

  """
  A list of edges which contains the `MicrophoneOrientation` and cursor to aid in pagination.
  """
  edges: [MicrophoneOrientationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MicrophoneOrientation` you could get from the connection.
  """
  totalCount: Int
}

"""A `MicrophoneOrientation` edge in the connection."""
type MicrophoneOrientationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MicrophoneOrientation` at the end of the edge."""
  node: MicrophoneOrientation
}

"""Methods to use when ordering `MicrophoneOrientation`."""
enum MicrophoneOrientationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Stores the microphone make and model attached to a device for either stationary or acoustic monitoring survey
"""
type MicrophoneType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  model: String
  manufacturer: String

  """Reads and enables pagination through a set of `Device`."""
  devicesByMicrophoneTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Device`."""
    orderBy: [DevicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DeviceCondition
  ): DevicesConnection!
}

"""
A condition to be used against `MicrophoneType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MicrophoneTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `model` field."""
  model: String

  """Checks for equality with the object’s `manufacturer` field."""
  manufacturer: String
}

"""An input for mutations affecting `MicrophoneType`"""
input MicrophoneTypeInput {
  id: Int
  model: String
  manufacturer: String
}

"""
Represents an update to a `MicrophoneType`. Fields that are set will be updated.
"""
input MicrophoneTypePatch {
  id: Int
  model: String
  manufacturer: String
}

"""A connection to a list of `MicrophoneType` values."""
type MicrophoneTypesConnection {
  """A list of `MicrophoneType` objects."""
  nodes: [MicrophoneType]!

  """
  A list of edges which contains the `MicrophoneType` and cursor to aid in pagination.
  """
  edges: [MicrophoneTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MicrophoneType` you could get from the connection.
  """
  totalCount: Int
}

"""A `MicrophoneType` edge in the connection."""
type MicrophoneTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MicrophoneType` at the end of the edge."""
  node: MicrophoneType
}

"""Methods to use when ordering `MicrophoneType`."""
enum MicrophoneTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MODEL_ASC
  MODEL_DESC
  MANUFACTURER_ASC
  MANUFACTURER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Table that stores the meta data about a given mobile acoustic monitoring event.
"""
type MobileAcousticEvent implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  surveyId: Int!
  night: Date
  activationStartTime: Datetime
  activationEndTime: Datetime
  deviceId: Int
  habitatTypeId: Int
  comments: String
  createdBy: String
  createdDate: Date
  lastModifiedBy: String
  lastModifiedDate: Date
  microphonePlacement: String

  """
  Reads a single `Survey` that is related to this `MobileAcousticEvent`.
  """
  surveyBySurveyId: Survey

  """
  Reads a single `Device` that is related to this `MobileAcousticEvent`.
  """
  deviceByDeviceId: Device

  """
  Reads a single `HabitatType` that is related to this `MobileAcousticEvent`.
  """
  habitatTypeByHabitatTypeId: HabitatType
}

"""
A condition to be used against `MobileAcousticEvent` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input MobileAcousticEventCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `surveyId` field."""
  surveyId: Int

  """Checks for equality with the object’s `night` field."""
  night: Date

  """Checks for equality with the object’s `activationStartTime` field."""
  activationStartTime: Datetime

  """Checks for equality with the object’s `activationEndTime` field."""
  activationEndTime: Datetime

  """Checks for equality with the object’s `deviceId` field."""
  deviceId: Int

  """Checks for equality with the object’s `habitatTypeId` field."""
  habitatTypeId: Int

  """Checks for equality with the object’s `comments` field."""
  comments: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Date

  """Checks for equality with the object’s `lastModifiedBy` field."""
  lastModifiedBy: String

  """Checks for equality with the object’s `lastModifiedDate` field."""
  lastModifiedDate: Date

  """Checks for equality with the object’s `microphonePlacement` field."""
  microphonePlacement: String
}

"""An input for mutations affecting `MobileAcousticEvent`"""
input MobileAcousticEventInput {
  id: Int
  surveyId: Int!
  night: Date
  activationStartTime: Datetime
  activationEndTime: Datetime
  deviceId: Int
  habitatTypeId: Int
  comments: String
  createdBy: String
  createdDate: Date
  lastModifiedBy: String
  lastModifiedDate: Date
  microphonePlacement: String
}

"""
Represents an update to a `MobileAcousticEvent`. Fields that are set will be updated.
"""
input MobileAcousticEventPatch {
  id: Int
  surveyId: Int
  night: Date
  activationStartTime: Datetime
  activationEndTime: Datetime
  deviceId: Int
  habitatTypeId: Int
  comments: String
  createdBy: String
  createdDate: Date
  lastModifiedBy: String
  lastModifiedDate: Date
  microphonePlacement: String
}

"""A connection to a list of `MobileAcousticEvent` values."""
type MobileAcousticEventsConnection {
  """A list of `MobileAcousticEvent` objects."""
  nodes: [MobileAcousticEvent]!

  """
  A list of edges which contains the `MobileAcousticEvent` and cursor to aid in pagination.
  """
  edges: [MobileAcousticEventsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MobileAcousticEvent` you could get from the connection.
  """
  totalCount: Int
}

"""A `MobileAcousticEvent` edge in the connection."""
type MobileAcousticEventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MobileAcousticEvent` at the end of the edge."""
  node: MobileAcousticEvent
}

"""Methods to use when ordering `MobileAcousticEvent`."""
enum MobileAcousticEventsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SURVEY_ID_ASC
  SURVEY_ID_DESC
  NIGHT_ASC
  NIGHT_DESC
  ACTIVATION_START_TIME_ASC
  ACTIVATION_START_TIME_DESC
  ACTIVATION_END_TIME_ASC
  ACTIVATION_END_TIME_DESC
  DEVICE_ID_ASC
  DEVICE_ID_DESC
  HABITAT_TYPE_ID_ASC
  HABITAT_TYPE_ID_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  LAST_MODIFIED_BY_ASC
  LAST_MODIFIED_BY_DESC
  LAST_MODIFIED_DATE_ASC
  LAST_MODIFIED_DATE_DESC
  MICROPHONE_PLACEMENT_ASC
  MICROPHONE_PLACEMENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Table identifies bat species to family, genus and species for mobile acoustic
surveys.  If no species information, id is to genus, if no genus id is to family
"""
type MobileAcousticValue implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  mobileAcousticEventId: Int
  recordingTime: Datetime
  softwareId: Int
  speciesId: Int
  wavFileName: String

  """
  Reads a single `Software` that is related to this `MobileAcousticValue`.
  """
  softwareBySoftwareId: Software

  """
  Reads a single `Species` that is related to this `MobileAcousticValue`.
  """
  speciesBySpeciesId: Species
}

"""
A condition to be used against `MobileAcousticValue` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input MobileAcousticValueCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `mobileAcousticEventId` field."""
  mobileAcousticEventId: Int

  """Checks for equality with the object’s `recordingTime` field."""
  recordingTime: Datetime

  """Checks for equality with the object’s `softwareId` field."""
  softwareId: Int

  """Checks for equality with the object’s `speciesId` field."""
  speciesId: Int

  """Checks for equality with the object’s `wavFileName` field."""
  wavFileName: String
}

"""An input for mutations affecting `MobileAcousticValue`"""
input MobileAcousticValueInput {
  id: Int
  mobileAcousticEventId: Int
  recordingTime: Datetime
  softwareId: Int
  speciesId: Int
  wavFileName: String
}

"""
Represents an update to a `MobileAcousticValue`. Fields that are set will be updated.
"""
input MobileAcousticValuePatch {
  id: Int
  mobileAcousticEventId: Int
  recordingTime: Datetime
  softwareId: Int
  speciesId: Int
  wavFileName: String
}

"""A connection to a list of `MobileAcousticValue` values."""
type MobileAcousticValuesConnection {
  """A list of `MobileAcousticValue` objects."""
  nodes: [MobileAcousticValue]!

  """
  A list of edges which contains the `MobileAcousticValue` and cursor to aid in pagination.
  """
  edges: [MobileAcousticValuesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MobileAcousticValue` you could get from the connection.
  """
  totalCount: Int
}

"""A `MobileAcousticValue` edge in the connection."""
type MobileAcousticValuesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MobileAcousticValue` at the end of the edge."""
  node: MobileAcousticValue
}

"""Methods to use when ordering `MobileAcousticValue`."""
enum MobileAcousticValuesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MOBILE_ACOUSTIC_EVENT_ID_ASC
  MOBILE_ACOUSTIC_EVENT_ID_DESC
  RECORDING_TIME_ASC
  RECORDING_TIME_DESC
  SOFTWARE_ID_ASC
  SOFTWARE_ID_DESC
  SPECIES_ID_ASC
  SPECIES_ID_DESC
  WAV_FILE_NAME_ASC
  WAV_FILE_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `ClutterType`."""
  createClutterType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateClutterTypeInput!
  ): CreateClutterTypePayload

  """Creates a single `ColonyCountEvent`."""
  createColonyCountEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateColonyCountEventInput!
  ): CreateColonyCountEventPayload

  """Creates a single `ColonyCountSiteSectionEvent`."""
  createColonyCountSiteSectionEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateColonyCountSiteSectionEventInput!
  ): CreateColonyCountSiteSectionEventPayload

  """Creates a single `ColonyCountSiteSectionValue`."""
  createColonyCountSiteSectionValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateColonyCountSiteSectionValueInput!
  ): CreateColonyCountSiteSectionValuePayload

  """Creates a single `CountConfidence`."""
  createCountConfidence(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCountConfidenceInput!
  ): CreateCountConfidencePayload

  """Creates a single `CountMethod`."""
  createCountMethod(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCountMethodInput!
  ): CreateCountMethodPayload

  """Creates a single `Device`."""
  createDevice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDeviceInput!
  ): CreateDevicePayload

  """Creates a single `DeviceType`."""
  createDeviceType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDeviceTypeInput!
  ): CreateDeviceTypePayload

  """Creates a single `EnvironmentalDatum`."""
  createEnvironmentalDatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEnvironmentalDatumInput!
  ): CreateEnvironmentalDatumPayload

  """Creates a single `HabitatType`."""
  createHabitatType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHabitatTypeInput!
  ): CreateHabitatTypePayload

  """Creates a single `HowPdPresumed`."""
  createHowPdPresumed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHowPdPresumedInput!
  ): CreateHowPdPresumedPayload

  """Creates a single `HowWnsPresumed`."""
  createHowWnsPresumed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHowWnsPresumedInput!
  ): CreateHowWnsPresumedPayload

  """Creates a single `Image`."""
  createImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateImageInput!
  ): CreateImagePayload

  """Creates a single `Laboratory`."""
  createLaboratory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLaboratoryInput!
  ): CreateLaboratoryPayload

  """Creates a single `LoggerType`."""
  createLoggerType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLoggerTypeInput!
  ): CreateLoggerTypePayload

  """Creates a single `MicrophoneHousingType`."""
  createMicrophoneHousingType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMicrophoneHousingTypeInput!
  ): CreateMicrophoneHousingTypePayload

  """Creates a single `MicrophoneOrientation`."""
  createMicrophoneOrientation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMicrophoneOrientationInput!
  ): CreateMicrophoneOrientationPayload

  """Creates a single `MicrophoneType`."""
  createMicrophoneType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMicrophoneTypeInput!
  ): CreateMicrophoneTypePayload

  """Creates a single `MobileAcousticEvent`."""
  createMobileAcousticEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMobileAcousticEventInput!
  ): CreateMobileAcousticEventPayload

  """Creates a single `MobileAcousticValue`."""
  createMobileAcousticValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMobileAcousticValueInput!
  ): CreateMobileAcousticValuePayload

  """Creates a single `OrganismCount`."""
  createOrganismCount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganismCountInput!
  ): CreateOrganismCountPayload

  """Creates a single `PresumedCauseDeath`."""
  createPresumedCauseDeath(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePresumedCauseDeathInput!
  ): CreatePresumedCauseDeathPayload

  """Creates a single `ProjectReference`."""
  createProjectReference(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectReferenceInput!
  ): CreateProjectReferencePayload

  """Creates a single `ProjectSite`."""
  createProjectSite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectSiteInput!
  ): CreateProjectSitePayload

  """Creates a single `SampleLevelInformation`."""
  createSampleLevelInformation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSampleLevelInformationInput!
  ): CreateSampleLevelInformationPayload

  """Creates a single `SampleType`."""
  createSampleType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSampleTypeInput!
  ): CreateSampleTypePayload

  """Creates a single `Site`."""
  createSite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSiteInput!
  ): CreateSitePayload

  """Creates a single `SiteLevel`."""
  createSiteLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSiteLevelInput!
  ): CreateSiteLevelPayload

  """Creates a single `SiteMaterial`."""
  createSiteMaterial(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSiteMaterialInput!
  ): CreateSiteMaterialPayload

  """Creates a single `SiteOrganismCount`."""
  createSiteOrganismCount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSiteOrganismCountInput!
  ): CreateSiteOrganismCountPayload

  """Creates a single `SiteSection`."""
  createSiteSection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSiteSectionInput!
  ): CreateSiteSectionPayload

  """Creates a single `SiteSize`."""
  createSiteSize(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSiteSizeInput!
  ): CreateSiteSizePayload

  """Creates a single `SiteType`."""
  createSiteType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSiteTypeInput!
  ): CreateSiteTypePayload

  """Creates a single `SiteUse`."""
  createSiteUse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSiteUseInput!
  ): CreateSiteUsePayload

  """Creates a single `Software`."""
  createSoftware(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSoftwareInput!
  ): CreateSoftwarePayload

  """Creates a single `Species`."""
  createSpecies(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSpeciesInput!
  ): CreateSpeciesPayload

  """Creates a single `StationaryAcousticEvent`."""
  createStationaryAcousticEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStationaryAcousticEventInput!
  ): CreateStationaryAcousticEventPayload

  """Creates a single `StationaryAcousticImage`."""
  createStationaryAcousticImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStationaryAcousticImageInput!
  ): CreateStationaryAcousticImagePayload

  """Creates a single `StationaryAcousticValue`."""
  createStationaryAcousticValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStationaryAcousticValueInput!
  ): CreateStationaryAcousticValuePayload

  """Creates a single `Survey`."""
  createSurvey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSurveyInput!
  ): CreateSurveyPayload

  """
  Updates a single `ClutterType` using its globally unique id and a patch.
  """
  updateClutterType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateClutterTypeInput!
  ): UpdateClutterTypePayload

  """Updates a single `ClutterType` using a unique key and a patch."""
  updateClutterTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateClutterTypeByIdInput!
  ): UpdateClutterTypePayload

  """
  Updates a single `ColonyCountEvent` using its globally unique id and a patch.
  """
  updateColonyCountEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateColonyCountEventInput!
  ): UpdateColonyCountEventPayload

  """Updates a single `ColonyCountEvent` using a unique key and a patch."""
  updateColonyCountEventById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateColonyCountEventByIdInput!
  ): UpdateColonyCountEventPayload

  """
  Updates a single `ColonyCountSiteSectionEvent` using its globally unique id and a patch.
  """
  updateColonyCountSiteSectionEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateColonyCountSiteSectionEventInput!
  ): UpdateColonyCountSiteSectionEventPayload

  """
  Updates a single `ColonyCountSiteSectionEvent` using a unique key and a patch.
  """
  updateColonyCountSiteSectionEventById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateColonyCountSiteSectionEventByIdInput!
  ): UpdateColonyCountSiteSectionEventPayload

  """
  Updates a single `ColonyCountSiteSectionValue` using its globally unique id and a patch.
  """
  updateColonyCountSiteSectionValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateColonyCountSiteSectionValueInput!
  ): UpdateColonyCountSiteSectionValuePayload

  """
  Updates a single `ColonyCountSiteSectionValue` using a unique key and a patch.
  """
  updateColonyCountSiteSectionValueById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateColonyCountSiteSectionValueByIdInput!
  ): UpdateColonyCountSiteSectionValuePayload

  """
  Updates a single `CountConfidence` using its globally unique id and a patch.
  """
  updateCountConfidence(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCountConfidenceInput!
  ): UpdateCountConfidencePayload

  """Updates a single `CountConfidence` using a unique key and a patch."""
  updateCountConfidenceById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCountConfidenceByIdInput!
  ): UpdateCountConfidencePayload

  """
  Updates a single `CountMethod` using its globally unique id and a patch.
  """
  updateCountMethod(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCountMethodInput!
  ): UpdateCountMethodPayload

  """Updates a single `CountMethod` using a unique key and a patch."""
  updateCountMethodById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCountMethodByIdInput!
  ): UpdateCountMethodPayload

  """Updates a single `Device` using its globally unique id and a patch."""
  updateDevice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDeviceInput!
  ): UpdateDevicePayload

  """Updates a single `Device` using a unique key and a patch."""
  updateDeviceById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDeviceByIdInput!
  ): UpdateDevicePayload

  """
  Updates a single `DeviceType` using its globally unique id and a patch.
  """
  updateDeviceType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDeviceTypeInput!
  ): UpdateDeviceTypePayload

  """Updates a single `DeviceType` using a unique key and a patch."""
  updateDeviceTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDeviceTypeByIdInput!
  ): UpdateDeviceTypePayload

  """
  Updates a single `EnvironmentalDatum` using its globally unique id and a patch.
  """
  updateEnvironmentalDatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEnvironmentalDatumInput!
  ): UpdateEnvironmentalDatumPayload

  """Updates a single `EnvironmentalDatum` using a unique key and a patch."""
  updateEnvironmentalDatumById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEnvironmentalDatumByIdInput!
  ): UpdateEnvironmentalDatumPayload

  """
  Updates a single `HabitatType` using its globally unique id and a patch.
  """
  updateHabitatType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHabitatTypeInput!
  ): UpdateHabitatTypePayload

  """Updates a single `HabitatType` using a unique key and a patch."""
  updateHabitatTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHabitatTypeByIdInput!
  ): UpdateHabitatTypePayload

  """
  Updates a single `HowPdPresumed` using its globally unique id and a patch.
  """
  updateHowPdPresumed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHowPdPresumedInput!
  ): UpdateHowPdPresumedPayload

  """Updates a single `HowPdPresumed` using a unique key and a patch."""
  updateHowPdPresumedById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHowPdPresumedByIdInput!
  ): UpdateHowPdPresumedPayload

  """
  Updates a single `HowWnsPresumed` using its globally unique id and a patch.
  """
  updateHowWnsPresumed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHowWnsPresumedInput!
  ): UpdateHowWnsPresumedPayload

  """Updates a single `HowWnsPresumed` using a unique key and a patch."""
  updateHowWnsPresumedById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHowWnsPresumedByIdInput!
  ): UpdateHowWnsPresumedPayload

  """Updates a single `Image` using its globally unique id and a patch."""
  updateImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImageInput!
  ): UpdateImagePayload

  """Updates a single `Image` using a unique key and a patch."""
  updateImageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImageByIdInput!
  ): UpdateImagePayload

  """
  Updates a single `Laboratory` using its globally unique id and a patch.
  """
  updateLaboratory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLaboratoryInput!
  ): UpdateLaboratoryPayload

  """Updates a single `Laboratory` using a unique key and a patch."""
  updateLaboratoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLaboratoryByIdInput!
  ): UpdateLaboratoryPayload

  """
  Updates a single `LoggerType` using its globally unique id and a patch.
  """
  updateLoggerType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLoggerTypeInput!
  ): UpdateLoggerTypePayload

  """Updates a single `LoggerType` using a unique key and a patch."""
  updateLoggerTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLoggerTypeByIdInput!
  ): UpdateLoggerTypePayload

  """
  Updates a single `MicrophoneHousingType` using its globally unique id and a patch.
  """
  updateMicrophoneHousingType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMicrophoneHousingTypeInput!
  ): UpdateMicrophoneHousingTypePayload

  """
  Updates a single `MicrophoneHousingType` using a unique key and a patch.
  """
  updateMicrophoneHousingTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMicrophoneHousingTypeByIdInput!
  ): UpdateMicrophoneHousingTypePayload

  """
  Updates a single `MicrophoneOrientation` using its globally unique id and a patch.
  """
  updateMicrophoneOrientation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMicrophoneOrientationInput!
  ): UpdateMicrophoneOrientationPayload

  """
  Updates a single `MicrophoneOrientation` using a unique key and a patch.
  """
  updateMicrophoneOrientationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMicrophoneOrientationByIdInput!
  ): UpdateMicrophoneOrientationPayload

  """
  Updates a single `MicrophoneType` using its globally unique id and a patch.
  """
  updateMicrophoneType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMicrophoneTypeInput!
  ): UpdateMicrophoneTypePayload

  """Updates a single `MicrophoneType` using a unique key and a patch."""
  updateMicrophoneTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMicrophoneTypeByIdInput!
  ): UpdateMicrophoneTypePayload

  """
  Updates a single `MobileAcousticEvent` using its globally unique id and a patch.
  """
  updateMobileAcousticEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMobileAcousticEventInput!
  ): UpdateMobileAcousticEventPayload

  """
  Updates a single `MobileAcousticEvent` using a unique key and a patch.
  """
  updateMobileAcousticEventById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMobileAcousticEventByIdInput!
  ): UpdateMobileAcousticEventPayload

  """
  Updates a single `MobileAcousticValue` using its globally unique id and a patch.
  """
  updateMobileAcousticValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMobileAcousticValueInput!
  ): UpdateMobileAcousticValuePayload

  """
  Updates a single `MobileAcousticValue` using a unique key and a patch.
  """
  updateMobileAcousticValueById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMobileAcousticValueByIdInput!
  ): UpdateMobileAcousticValuePayload

  """
  Updates a single `OrganismCount` using its globally unique id and a patch.
  """
  updateOrganismCount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganismCountInput!
  ): UpdateOrganismCountPayload

  """Updates a single `OrganismCount` using a unique key and a patch."""
  updateOrganismCountById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganismCountByIdInput!
  ): UpdateOrganismCountPayload

  """
  Updates a single `PresumedCauseDeath` using its globally unique id and a patch.
  """
  updatePresumedCauseDeath(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePresumedCauseDeathInput!
  ): UpdatePresumedCauseDeathPayload

  """Updates a single `PresumedCauseDeath` using a unique key and a patch."""
  updatePresumedCauseDeathById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePresumedCauseDeathByIdInput!
  ): UpdatePresumedCauseDeathPayload

  """
  Updates a single `ProjectReference` using its globally unique id and a patch.
  """
  updateProjectReference(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectReferenceInput!
  ): UpdateProjectReferencePayload

  """Updates a single `ProjectReference` using a unique key and a patch."""
  updateProjectReferenceById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectReferenceByIdInput!
  ): UpdateProjectReferencePayload

  """
  Updates a single `ProjectSite` using its globally unique id and a patch.
  """
  updateProjectSite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectSiteInput!
  ): UpdateProjectSitePayload

  """Updates a single `ProjectSite` using a unique key and a patch."""
  updateProjectSiteByProjectIdAndSiteId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectSiteByProjectIdAndSiteIdInput!
  ): UpdateProjectSitePayload

  """
  Updates a single `SampleLevelInformation` using its globally unique id and a patch.
  """
  updateSampleLevelInformation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSampleLevelInformationInput!
  ): UpdateSampleLevelInformationPayload

  """
  Updates a single `SampleLevelInformation` using a unique key and a patch.
  """
  updateSampleLevelInformationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSampleLevelInformationByIdInput!
  ): UpdateSampleLevelInformationPayload

  """
  Updates a single `SampleType` using its globally unique id and a patch.
  """
  updateSampleType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSampleTypeInput!
  ): UpdateSampleTypePayload

  """Updates a single `SampleType` using a unique key and a patch."""
  updateSampleTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSampleTypeByIdInput!
  ): UpdateSampleTypePayload

  """Updates a single `Site` using its globally unique id and a patch."""
  updateSite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSiteInput!
  ): UpdateSitePayload

  """Updates a single `Site` using a unique key and a patch."""
  updateSiteById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSiteByIdInput!
  ): UpdateSitePayload

  """
  Updates a single `SiteLevel` using its globally unique id and a patch.
  """
  updateSiteLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSiteLevelInput!
  ): UpdateSiteLevelPayload

  """Updates a single `SiteLevel` using a unique key and a patch."""
  updateSiteLevelById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSiteLevelByIdInput!
  ): UpdateSiteLevelPayload

  """
  Updates a single `SiteMaterial` using its globally unique id and a patch.
  """
  updateSiteMaterial(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSiteMaterialInput!
  ): UpdateSiteMaterialPayload

  """Updates a single `SiteMaterial` using a unique key and a patch."""
  updateSiteMaterialById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSiteMaterialByIdInput!
  ): UpdateSiteMaterialPayload

  """
  Updates a single `SiteOrganismCount` using its globally unique id and a patch.
  """
  updateSiteOrganismCount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSiteOrganismCountInput!
  ): UpdateSiteOrganismCountPayload

  """Updates a single `SiteOrganismCount` using a unique key and a patch."""
  updateSiteOrganismCountBySiteIdAndOrganismCountId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSiteOrganismCountBySiteIdAndOrganismCountIdInput!
  ): UpdateSiteOrganismCountPayload

  """
  Updates a single `SiteSection` using its globally unique id and a patch.
  """
  updateSiteSection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSiteSectionInput!
  ): UpdateSiteSectionPayload

  """Updates a single `SiteSection` using a unique key and a patch."""
  updateSiteSectionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSiteSectionByIdInput!
  ): UpdateSiteSectionPayload

  """Updates a single `SiteSize` using its globally unique id and a patch."""
  updateSiteSize(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSiteSizeInput!
  ): UpdateSiteSizePayload

  """Updates a single `SiteSize` using a unique key and a patch."""
  updateSiteSizeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSiteSizeByIdInput!
  ): UpdateSiteSizePayload

  """Updates a single `SiteType` using its globally unique id and a patch."""
  updateSiteType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSiteTypeInput!
  ): UpdateSiteTypePayload

  """Updates a single `SiteType` using a unique key and a patch."""
  updateSiteTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSiteTypeByIdInput!
  ): UpdateSiteTypePayload

  """Updates a single `SiteUse` using its globally unique id and a patch."""
  updateSiteUse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSiteUseInput!
  ): UpdateSiteUsePayload

  """Updates a single `SiteUse` using a unique key and a patch."""
  updateSiteUseById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSiteUseByIdInput!
  ): UpdateSiteUsePayload

  """Updates a single `Software` using its globally unique id and a patch."""
  updateSoftware(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSoftwareInput!
  ): UpdateSoftwarePayload

  """Updates a single `Software` using a unique key and a patch."""
  updateSoftwareById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSoftwareByIdInput!
  ): UpdateSoftwarePayload

  """Updates a single `Species` using its globally unique id and a patch."""
  updateSpecies(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpeciesInput!
  ): UpdateSpeciesPayload

  """Updates a single `Species` using a unique key and a patch."""
  updateSpeciesById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpeciesByIdInput!
  ): UpdateSpeciesPayload

  """
  Updates a single `StationaryAcousticEvent` using its globally unique id and a patch.
  """
  updateStationaryAcousticEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStationaryAcousticEventInput!
  ): UpdateStationaryAcousticEventPayload

  """
  Updates a single `StationaryAcousticEvent` using a unique key and a patch.
  """
  updateStationaryAcousticEventById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStationaryAcousticEventByIdInput!
  ): UpdateStationaryAcousticEventPayload

  """
  Updates a single `StationaryAcousticImage` using its globally unique id and a patch.
  """
  updateStationaryAcousticImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStationaryAcousticImageInput!
  ): UpdateStationaryAcousticImagePayload

  """
  Updates a single `StationaryAcousticImage` using a unique key and a patch.
  """
  updateStationaryAcousticImageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStationaryAcousticImageByIdInput!
  ): UpdateStationaryAcousticImagePayload

  """
  Updates a single `StationaryAcousticValue` using its globally unique id and a patch.
  """
  updateStationaryAcousticValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStationaryAcousticValueInput!
  ): UpdateStationaryAcousticValuePayload

  """
  Updates a single `StationaryAcousticValue` using a unique key and a patch.
  """
  updateStationaryAcousticValueById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStationaryAcousticValueByIdInput!
  ): UpdateStationaryAcousticValuePayload

  """Updates a single `Survey` using its globally unique id and a patch."""
  updateSurvey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyInput!
  ): UpdateSurveyPayload

  """Updates a single `Survey` using a unique key and a patch."""
  updateSurveyById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyByIdInput!
  ): UpdateSurveyPayload

  """Deletes a single `ClutterType` using its globally unique id."""
  deleteClutterType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteClutterTypeInput!
  ): DeleteClutterTypePayload

  """Deletes a single `ClutterType` using a unique key."""
  deleteClutterTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteClutterTypeByIdInput!
  ): DeleteClutterTypePayload

  """Deletes a single `ColonyCountEvent` using its globally unique id."""
  deleteColonyCountEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteColonyCountEventInput!
  ): DeleteColonyCountEventPayload

  """Deletes a single `ColonyCountEvent` using a unique key."""
  deleteColonyCountEventById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteColonyCountEventByIdInput!
  ): DeleteColonyCountEventPayload

  """
  Deletes a single `ColonyCountSiteSectionEvent` using its globally unique id.
  """
  deleteColonyCountSiteSectionEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteColonyCountSiteSectionEventInput!
  ): DeleteColonyCountSiteSectionEventPayload

  """Deletes a single `ColonyCountSiteSectionEvent` using a unique key."""
  deleteColonyCountSiteSectionEventById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteColonyCountSiteSectionEventByIdInput!
  ): DeleteColonyCountSiteSectionEventPayload

  """
  Deletes a single `ColonyCountSiteSectionValue` using its globally unique id.
  """
  deleteColonyCountSiteSectionValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteColonyCountSiteSectionValueInput!
  ): DeleteColonyCountSiteSectionValuePayload

  """Deletes a single `ColonyCountSiteSectionValue` using a unique key."""
  deleteColonyCountSiteSectionValueById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteColonyCountSiteSectionValueByIdInput!
  ): DeleteColonyCountSiteSectionValuePayload

  """Deletes a single `CountConfidence` using its globally unique id."""
  deleteCountConfidence(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCountConfidenceInput!
  ): DeleteCountConfidencePayload

  """Deletes a single `CountConfidence` using a unique key."""
  deleteCountConfidenceById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCountConfidenceByIdInput!
  ): DeleteCountConfidencePayload

  """Deletes a single `CountMethod` using its globally unique id."""
  deleteCountMethod(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCountMethodInput!
  ): DeleteCountMethodPayload

  """Deletes a single `CountMethod` using a unique key."""
  deleteCountMethodById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCountMethodByIdInput!
  ): DeleteCountMethodPayload

  """Deletes a single `Device` using its globally unique id."""
  deleteDevice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDeviceInput!
  ): DeleteDevicePayload

  """Deletes a single `Device` using a unique key."""
  deleteDeviceById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDeviceByIdInput!
  ): DeleteDevicePayload

  """Deletes a single `DeviceType` using its globally unique id."""
  deleteDeviceType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDeviceTypeInput!
  ): DeleteDeviceTypePayload

  """Deletes a single `DeviceType` using a unique key."""
  deleteDeviceTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDeviceTypeByIdInput!
  ): DeleteDeviceTypePayload

  """Deletes a single `EnvironmentalDatum` using its globally unique id."""
  deleteEnvironmentalDatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEnvironmentalDatumInput!
  ): DeleteEnvironmentalDatumPayload

  """Deletes a single `EnvironmentalDatum` using a unique key."""
  deleteEnvironmentalDatumById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEnvironmentalDatumByIdInput!
  ): DeleteEnvironmentalDatumPayload

  """Deletes a single `HabitatType` using its globally unique id."""
  deleteHabitatType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHabitatTypeInput!
  ): DeleteHabitatTypePayload

  """Deletes a single `HabitatType` using a unique key."""
  deleteHabitatTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHabitatTypeByIdInput!
  ): DeleteHabitatTypePayload

  """Deletes a single `HowPdPresumed` using its globally unique id."""
  deleteHowPdPresumed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHowPdPresumedInput!
  ): DeleteHowPdPresumedPayload

  """Deletes a single `HowPdPresumed` using a unique key."""
  deleteHowPdPresumedById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHowPdPresumedByIdInput!
  ): DeleteHowPdPresumedPayload

  """Deletes a single `HowWnsPresumed` using its globally unique id."""
  deleteHowWnsPresumed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHowWnsPresumedInput!
  ): DeleteHowWnsPresumedPayload

  """Deletes a single `HowWnsPresumed` using a unique key."""
  deleteHowWnsPresumedById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHowWnsPresumedByIdInput!
  ): DeleteHowWnsPresumedPayload

  """Deletes a single `Image` using its globally unique id."""
  deleteImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImageInput!
  ): DeleteImagePayload

  """Deletes a single `Image` using a unique key."""
  deleteImageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImageByIdInput!
  ): DeleteImagePayload

  """Deletes a single `Laboratory` using its globally unique id."""
  deleteLaboratory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLaboratoryInput!
  ): DeleteLaboratoryPayload

  """Deletes a single `Laboratory` using a unique key."""
  deleteLaboratoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLaboratoryByIdInput!
  ): DeleteLaboratoryPayload

  """Deletes a single `LoggerType` using its globally unique id."""
  deleteLoggerType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLoggerTypeInput!
  ): DeleteLoggerTypePayload

  """Deletes a single `LoggerType` using a unique key."""
  deleteLoggerTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLoggerTypeByIdInput!
  ): DeleteLoggerTypePayload

  """
  Deletes a single `MicrophoneHousingType` using its globally unique id.
  """
  deleteMicrophoneHousingType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMicrophoneHousingTypeInput!
  ): DeleteMicrophoneHousingTypePayload

  """Deletes a single `MicrophoneHousingType` using a unique key."""
  deleteMicrophoneHousingTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMicrophoneHousingTypeByIdInput!
  ): DeleteMicrophoneHousingTypePayload

  """
  Deletes a single `MicrophoneOrientation` using its globally unique id.
  """
  deleteMicrophoneOrientation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMicrophoneOrientationInput!
  ): DeleteMicrophoneOrientationPayload

  """Deletes a single `MicrophoneOrientation` using a unique key."""
  deleteMicrophoneOrientationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMicrophoneOrientationByIdInput!
  ): DeleteMicrophoneOrientationPayload

  """Deletes a single `MicrophoneType` using its globally unique id."""
  deleteMicrophoneType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMicrophoneTypeInput!
  ): DeleteMicrophoneTypePayload

  """Deletes a single `MicrophoneType` using a unique key."""
  deleteMicrophoneTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMicrophoneTypeByIdInput!
  ): DeleteMicrophoneTypePayload

  """Deletes a single `MobileAcousticEvent` using its globally unique id."""
  deleteMobileAcousticEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMobileAcousticEventInput!
  ): DeleteMobileAcousticEventPayload

  """Deletes a single `MobileAcousticEvent` using a unique key."""
  deleteMobileAcousticEventById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMobileAcousticEventByIdInput!
  ): DeleteMobileAcousticEventPayload

  """Deletes a single `MobileAcousticValue` using its globally unique id."""
  deleteMobileAcousticValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMobileAcousticValueInput!
  ): DeleteMobileAcousticValuePayload

  """Deletes a single `MobileAcousticValue` using a unique key."""
  deleteMobileAcousticValueById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMobileAcousticValueByIdInput!
  ): DeleteMobileAcousticValuePayload

  """Deletes a single `OrganismCount` using its globally unique id."""
  deleteOrganismCount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganismCountInput!
  ): DeleteOrganismCountPayload

  """Deletes a single `OrganismCount` using a unique key."""
  deleteOrganismCountById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganismCountByIdInput!
  ): DeleteOrganismCountPayload

  """Deletes a single `PresumedCauseDeath` using its globally unique id."""
  deletePresumedCauseDeath(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePresumedCauseDeathInput!
  ): DeletePresumedCauseDeathPayload

  """Deletes a single `PresumedCauseDeath` using a unique key."""
  deletePresumedCauseDeathById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePresumedCauseDeathByIdInput!
  ): DeletePresumedCauseDeathPayload

  """Deletes a single `ProjectReference` using its globally unique id."""
  deleteProjectReference(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectReferenceInput!
  ): DeleteProjectReferencePayload

  """Deletes a single `ProjectReference` using a unique key."""
  deleteProjectReferenceById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectReferenceByIdInput!
  ): DeleteProjectReferencePayload

  """Deletes a single `ProjectSite` using its globally unique id."""
  deleteProjectSite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectSiteInput!
  ): DeleteProjectSitePayload

  """Deletes a single `ProjectSite` using a unique key."""
  deleteProjectSiteByProjectIdAndSiteId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectSiteByProjectIdAndSiteIdInput!
  ): DeleteProjectSitePayload

  """
  Deletes a single `SampleLevelInformation` using its globally unique id.
  """
  deleteSampleLevelInformation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSampleLevelInformationInput!
  ): DeleteSampleLevelInformationPayload

  """Deletes a single `SampleLevelInformation` using a unique key."""
  deleteSampleLevelInformationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSampleLevelInformationByIdInput!
  ): DeleteSampleLevelInformationPayload

  """Deletes a single `SampleType` using its globally unique id."""
  deleteSampleType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSampleTypeInput!
  ): DeleteSampleTypePayload

  """Deletes a single `SampleType` using a unique key."""
  deleteSampleTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSampleTypeByIdInput!
  ): DeleteSampleTypePayload

  """Deletes a single `Site` using its globally unique id."""
  deleteSite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSiteInput!
  ): DeleteSitePayload

  """Deletes a single `Site` using a unique key."""
  deleteSiteById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSiteByIdInput!
  ): DeleteSitePayload

  """Deletes a single `SiteLevel` using its globally unique id."""
  deleteSiteLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSiteLevelInput!
  ): DeleteSiteLevelPayload

  """Deletes a single `SiteLevel` using a unique key."""
  deleteSiteLevelById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSiteLevelByIdInput!
  ): DeleteSiteLevelPayload

  """Deletes a single `SiteMaterial` using its globally unique id."""
  deleteSiteMaterial(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSiteMaterialInput!
  ): DeleteSiteMaterialPayload

  """Deletes a single `SiteMaterial` using a unique key."""
  deleteSiteMaterialById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSiteMaterialByIdInput!
  ): DeleteSiteMaterialPayload

  """Deletes a single `SiteOrganismCount` using its globally unique id."""
  deleteSiteOrganismCount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSiteOrganismCountInput!
  ): DeleteSiteOrganismCountPayload

  """Deletes a single `SiteOrganismCount` using a unique key."""
  deleteSiteOrganismCountBySiteIdAndOrganismCountId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSiteOrganismCountBySiteIdAndOrganismCountIdInput!
  ): DeleteSiteOrganismCountPayload

  """Deletes a single `SiteSection` using its globally unique id."""
  deleteSiteSection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSiteSectionInput!
  ): DeleteSiteSectionPayload

  """Deletes a single `SiteSection` using a unique key."""
  deleteSiteSectionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSiteSectionByIdInput!
  ): DeleteSiteSectionPayload

  """Deletes a single `SiteSize` using its globally unique id."""
  deleteSiteSize(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSiteSizeInput!
  ): DeleteSiteSizePayload

  """Deletes a single `SiteSize` using a unique key."""
  deleteSiteSizeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSiteSizeByIdInput!
  ): DeleteSiteSizePayload

  """Deletes a single `SiteType` using its globally unique id."""
  deleteSiteType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSiteTypeInput!
  ): DeleteSiteTypePayload

  """Deletes a single `SiteType` using a unique key."""
  deleteSiteTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSiteTypeByIdInput!
  ): DeleteSiteTypePayload

  """Deletes a single `SiteUse` using its globally unique id."""
  deleteSiteUse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSiteUseInput!
  ): DeleteSiteUsePayload

  """Deletes a single `SiteUse` using a unique key."""
  deleteSiteUseById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSiteUseByIdInput!
  ): DeleteSiteUsePayload

  """Deletes a single `Software` using its globally unique id."""
  deleteSoftware(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSoftwareInput!
  ): DeleteSoftwarePayload

  """Deletes a single `Software` using a unique key."""
  deleteSoftwareById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSoftwareByIdInput!
  ): DeleteSoftwarePayload

  """Deletes a single `Species` using its globally unique id."""
  deleteSpecies(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpeciesInput!
  ): DeleteSpeciesPayload

  """Deletes a single `Species` using a unique key."""
  deleteSpeciesById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpeciesByIdInput!
  ): DeleteSpeciesPayload

  """
  Deletes a single `StationaryAcousticEvent` using its globally unique id.
  """
  deleteStationaryAcousticEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStationaryAcousticEventInput!
  ): DeleteStationaryAcousticEventPayload

  """Deletes a single `StationaryAcousticEvent` using a unique key."""
  deleteStationaryAcousticEventById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStationaryAcousticEventByIdInput!
  ): DeleteStationaryAcousticEventPayload

  """
  Deletes a single `StationaryAcousticImage` using its globally unique id.
  """
  deleteStationaryAcousticImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStationaryAcousticImageInput!
  ): DeleteStationaryAcousticImagePayload

  """Deletes a single `StationaryAcousticImage` using a unique key."""
  deleteStationaryAcousticImageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStationaryAcousticImageByIdInput!
  ): DeleteStationaryAcousticImagePayload

  """
  Deletes a single `StationaryAcousticValue` using its globally unique id.
  """
  deleteStationaryAcousticValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStationaryAcousticValueInput!
  ): DeleteStationaryAcousticValuePayload

  """Deletes a single `StationaryAcousticValue` using a unique key."""
  deleteStationaryAcousticValueById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStationaryAcousticValueByIdInput!
  ): DeleteStationaryAcousticValuePayload

  """Deletes a single `Survey` using its globally unique id."""
  deleteSurvey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyInput!
  ): DeleteSurveyPayload

  """Deletes a single `Survey` using a unique key."""
  deleteSurveyById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyByIdInput!
  ): DeleteSurveyPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type OrganismCount implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  observationTimespanStart: Datetime!
  observationTimespanEnd: Datetime!
  count: Int
  speciesCode: String

  """Reads and enables pagination through a set of `SiteOrganismCount`."""
  siteOrganismCountsByOrganismCountId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SiteOrganismCount`."""
    orderBy: [SiteOrganismCountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SiteOrganismCountCondition
  ): SiteOrganismCountsConnection!
}

"""
A condition to be used against `OrganismCount` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganismCountCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """
  Checks for equality with the object’s `observationTimespanStart` field.
  """
  observationTimespanStart: Datetime

  """Checks for equality with the object’s `observationTimespanEnd` field."""
  observationTimespanEnd: Datetime

  """Checks for equality with the object’s `count` field."""
  count: Int

  """Checks for equality with the object’s `speciesCode` field."""
  speciesCode: String
}

"""An input for mutations affecting `OrganismCount`"""
input OrganismCountInput {
  id: Int
  observationTimespanStart: Datetime!
  observationTimespanEnd: Datetime!
  count: Int
  speciesCode: String
}

"""
Represents an update to a `OrganismCount`. Fields that are set will be updated.
"""
input OrganismCountPatch {
  id: Int
  observationTimespanStart: Datetime
  observationTimespanEnd: Datetime
  count: Int
  speciesCode: String
}

"""A connection to a list of `OrganismCount` values."""
type OrganismCountsConnection {
  """A list of `OrganismCount` objects."""
  nodes: [OrganismCount]!

  """
  A list of edges which contains the `OrganismCount` and cursor to aid in pagination.
  """
  edges: [OrganismCountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `OrganismCount` you could get from the connection."""
  totalCount: Int
}

"""A `OrganismCount` edge in the connection."""
type OrganismCountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganismCount` at the end of the edge."""
  node: OrganismCount
}

"""Methods to use when ordering `OrganismCount`."""
enum OrganismCountsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  OBSERVATION_TIMESPAN_START_ASC
  OBSERVATION_TIMESPAN_START_DESC
  OBSERVATION_TIMESPAN_END_ASC
  OBSERVATION_TIMESPAN_END_DESC
  COUNT_ASC
  COUNT_DESC
  SPECIES_CODE_ASC
  SPECIES_CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""
This table provides a list of options to name presumed causes of death for any
bats counted as dead - e.g. natural causes, low temperature (frozen), vandalism,
predation, structural collapse, WNS, unknown
"""
type PresumedCauseDeath implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  cause: String
  comments: String

  """
  Reads and enables pagination through a set of `ColonyCountSiteSectionValue`.
  """
  colonyCountSiteSectionValuesByPresumedCauseDeathId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ColonyCountSiteSectionValue`."""
    orderBy: [ColonyCountSiteSectionValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ColonyCountSiteSectionValueCondition
  ): ColonyCountSiteSectionValuesConnection!
}

"""
A condition to be used against `PresumedCauseDeath` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PresumedCauseDeathCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `cause` field."""
  cause: String

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `PresumedCauseDeath`"""
input PresumedCauseDeathInput {
  id: Int
  cause: String
  comments: String
}

"""
Represents an update to a `PresumedCauseDeath`. Fields that are set will be updated.
"""
input PresumedCauseDeathPatch {
  id: Int
  cause: String
  comments: String
}

"""A connection to a list of `PresumedCauseDeath` values."""
type PresumedCauseDeathsConnection {
  """A list of `PresumedCauseDeath` objects."""
  nodes: [PresumedCauseDeath]!

  """
  A list of edges which contains the `PresumedCauseDeath` and cursor to aid in pagination.
  """
  edges: [PresumedCauseDeathsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PresumedCauseDeath` you could get from the connection.
  """
  totalCount: Int
}

"""A `PresumedCauseDeath` edge in the connection."""
type PresumedCauseDeathsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PresumedCauseDeath` at the end of the edge."""
  node: PresumedCauseDeath
}

"""Methods to use when ordering `PresumedCauseDeath`."""
enum PresumedCauseDeathsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CAUSE_ASC
  CAUSE_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ProjectReference implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  projectId: String!

  """Reads and enables pagination through a set of `ProjectSite`."""
  projectSitesByProjectId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectSite`."""
    orderBy: [ProjectSitesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectSiteCondition
  ): ProjectSitesConnection!
}

"""
A condition to be used against `ProjectReference` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectReferenceCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: String
}

"""An input for mutations affecting `ProjectReference`"""
input ProjectReferenceInput {
  id: Int
  projectId: String!
}

"""
Represents an update to a `ProjectReference`. Fields that are set will be updated.
"""
input ProjectReferencePatch {
  id: Int
  projectId: String
}

"""A connection to a list of `ProjectReference` values."""
type ProjectReferencesConnection {
  """A list of `ProjectReference` objects."""
  nodes: [ProjectReference]!

  """
  A list of edges which contains the `ProjectReference` and cursor to aid in pagination.
  """
  edges: [ProjectReferencesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectReference` you could get from the connection.
  """
  totalCount: Int
}

"""A `ProjectReference` edge in the connection."""
type ProjectReferencesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectReference` at the end of the edge."""
  node: ProjectReference
}

"""Methods to use when ordering `ProjectReference`."""
enum ProjectReferencesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ProjectSite implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  projectId: Int!
  siteId: Int!

  """
  Reads a single `ProjectReference` that is related to this `ProjectSite`.
  """
  projectReferenceByProjectId: ProjectReference

  """Reads a single `Site` that is related to this `ProjectSite`."""
  siteBySiteId: Site
}

"""
A condition to be used against `ProjectSite` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ProjectSiteCondition {
  """Checks for equality with the object’s `projectId` field."""
  projectId: Int

  """Checks for equality with the object’s `siteId` field."""
  siteId: Int
}

"""An input for mutations affecting `ProjectSite`"""
input ProjectSiteInput {
  projectId: Int!
  siteId: Int!
}

"""
Represents an update to a `ProjectSite`. Fields that are set will be updated.
"""
input ProjectSitePatch {
  projectId: Int
  siteId: Int
}

"""A connection to a list of `ProjectSite` values."""
type ProjectSitesConnection {
  """A list of `ProjectSite` objects."""
  nodes: [ProjectSite]!

  """
  A list of edges which contains the `ProjectSite` and cursor to aid in pagination.
  """
  edges: [ProjectSitesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectSite` you could get from the connection."""
  totalCount: Int
}

"""A `ProjectSite` edge in the connection."""
type ProjectSitesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectSite` at the end of the edge."""
  node: ProjectSite
}

"""Methods to use when ordering `ProjectSite`."""
enum ProjectSitesOrderBy {
  NATURAL
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  SITE_ID_ASC
  SITE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `ClutterType`."""
  allClutterTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ClutterType`."""
    orderBy: [ClutterTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ClutterTypeCondition
  ): ClutterTypesConnection

  """Reads and enables pagination through a set of `ColonyCountEvent`."""
  allColonyCountEvents(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ColonyCountEvent`."""
    orderBy: [ColonyCountEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ColonyCountEventCondition
  ): ColonyCountEventsConnection

  """
  Reads and enables pagination through a set of `ColonyCountSiteSectionEvent`.
  """
  allColonyCountSiteSectionEvents(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ColonyCountSiteSectionEvent`."""
    orderBy: [ColonyCountSiteSectionEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ColonyCountSiteSectionEventCondition
  ): ColonyCountSiteSectionEventsConnection

  """
  Reads and enables pagination through a set of `ColonyCountSiteSectionValue`.
  """
  allColonyCountSiteSectionValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ColonyCountSiteSectionValue`."""
    orderBy: [ColonyCountSiteSectionValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ColonyCountSiteSectionValueCondition
  ): ColonyCountSiteSectionValuesConnection

  """Reads and enables pagination through a set of `CountConfidence`."""
  allCountConfidences(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CountConfidence`."""
    orderBy: [CountConfidencesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CountConfidenceCondition
  ): CountConfidencesConnection

  """Reads and enables pagination through a set of `CountMethod`."""
  allCountMethods(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CountMethod`."""
    orderBy: [CountMethodsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CountMethodCondition
  ): CountMethodsConnection

  """Reads and enables pagination through a set of `Device`."""
  allDevices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Device`."""
    orderBy: [DevicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DeviceCondition
  ): DevicesConnection

  """Reads and enables pagination through a set of `DeviceType`."""
  allDeviceTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DeviceType`."""
    orderBy: [DeviceTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DeviceTypeCondition
  ): DeviceTypesConnection

  """Reads and enables pagination through a set of `EnvironmentalDatum`."""
  allEnvironmentalData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EnvironmentalDatum`."""
    orderBy: [EnvironmentalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EnvironmentalDatumCondition
  ): EnvironmentalDataConnection

  """Reads and enables pagination through a set of `HabitatType`."""
  allHabitatTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HabitatType`."""
    orderBy: [HabitatTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HabitatTypeCondition
  ): HabitatTypesConnection

  """Reads and enables pagination through a set of `HowPdPresumed`."""
  allHowPdPresumeds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HowPdPresumed`."""
    orderBy: [HowPdPresumedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HowPdPresumedCondition
  ): HowPdPresumedsConnection

  """Reads and enables pagination through a set of `HowWnsPresumed`."""
  allHowWnsPresumeds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HowWnsPresumed`."""
    orderBy: [HowWnsPresumedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HowWnsPresumedCondition
  ): HowWnsPresumedsConnection

  """Reads and enables pagination through a set of `Image`."""
  allImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition
  ): ImagesConnection

  """Reads and enables pagination through a set of `Laboratory`."""
  allLaboratories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Laboratory`."""
    orderBy: [LaboratoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LaboratoryCondition
  ): LaboratoriesConnection

  """Reads and enables pagination through a set of `LoggerType`."""
  allLoggerTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LoggerType`."""
    orderBy: [LoggerTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LoggerTypeCondition
  ): LoggerTypesConnection

  """
  Reads and enables pagination through a set of `MicrophoneHousingType`.
  """
  allMicrophoneHousingTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MicrophoneHousingType`."""
    orderBy: [MicrophoneHousingTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MicrophoneHousingTypeCondition
  ): MicrophoneHousingTypesConnection

  """
  Reads and enables pagination through a set of `MicrophoneOrientation`.
  """
  allMicrophoneOrientations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MicrophoneOrientation`."""
    orderBy: [MicrophoneOrientationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MicrophoneOrientationCondition
  ): MicrophoneOrientationsConnection

  """Reads and enables pagination through a set of `MicrophoneType`."""
  allMicrophoneTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MicrophoneType`."""
    orderBy: [MicrophoneTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MicrophoneTypeCondition
  ): MicrophoneTypesConnection

  """Reads and enables pagination through a set of `MobileAcousticEvent`."""
  allMobileAcousticEvents(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MobileAcousticEvent`."""
    orderBy: [MobileAcousticEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MobileAcousticEventCondition
  ): MobileAcousticEventsConnection

  """Reads and enables pagination through a set of `MobileAcousticValue`."""
  allMobileAcousticValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MobileAcousticValue`."""
    orderBy: [MobileAcousticValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MobileAcousticValueCondition
  ): MobileAcousticValuesConnection

  """Reads and enables pagination through a set of `OrganismCount`."""
  allOrganismCounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganismCount`."""
    orderBy: [OrganismCountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganismCountCondition
  ): OrganismCountsConnection

  """Reads and enables pagination through a set of `PresumedCauseDeath`."""
  allPresumedCauseDeaths(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PresumedCauseDeath`."""
    orderBy: [PresumedCauseDeathsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PresumedCauseDeathCondition
  ): PresumedCauseDeathsConnection

  """Reads and enables pagination through a set of `ProjectReference`."""
  allProjectReferences(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectReference`."""
    orderBy: [ProjectReferencesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectReferenceCondition
  ): ProjectReferencesConnection

  """Reads and enables pagination through a set of `ProjectSite`."""
  allProjectSites(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectSite`."""
    orderBy: [ProjectSitesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectSiteCondition
  ): ProjectSitesConnection

  """
  Reads and enables pagination through a set of `SampleLevelInformation`.
  """
  allSampleLevelInformations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampleLevelInformation`."""
    orderBy: [SampleLevelInformationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampleLevelInformationCondition
  ): SampleLevelInformationsConnection

  """Reads and enables pagination through a set of `SampleType`."""
  allSampleTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampleType`."""
    orderBy: [SampleTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampleTypeCondition
  ): SampleTypesConnection

  """Reads and enables pagination through a set of `Site`."""
  allSites(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Site`."""
    orderBy: [SitesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SiteCondition
  ): SitesConnection

  """Reads and enables pagination through a set of `SiteLevel`."""
  allSiteLevels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SiteLevel`."""
    orderBy: [SiteLevelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SiteLevelCondition
  ): SiteLevelsConnection

  """Reads and enables pagination through a set of `SiteMaterial`."""
  allSiteMaterials(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SiteMaterial`."""
    orderBy: [SiteMaterialsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SiteMaterialCondition
  ): SiteMaterialsConnection

  """Reads and enables pagination through a set of `SiteOrganismCount`."""
  allSiteOrganismCounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SiteOrganismCount`."""
    orderBy: [SiteOrganismCountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SiteOrganismCountCondition
  ): SiteOrganismCountsConnection

  """Reads and enables pagination through a set of `SiteSection`."""
  allSiteSections(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SiteSection`."""
    orderBy: [SiteSectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SiteSectionCondition
  ): SiteSectionsConnection

  """Reads and enables pagination through a set of `SiteSize`."""
  allSiteSizes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SiteSize`."""
    orderBy: [SiteSizesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SiteSizeCondition
  ): SiteSizesConnection

  """Reads and enables pagination through a set of `SiteType`."""
  allSiteTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SiteType`."""
    orderBy: [SiteTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SiteTypeCondition
  ): SiteTypesConnection

  """Reads and enables pagination through a set of `SiteUse`."""
  allSiteUses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SiteUse`."""
    orderBy: [SiteUsesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SiteUseCondition
  ): SiteUsesConnection

  """Reads and enables pagination through a set of `Software`."""
  allSoftwares(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Software`."""
    orderBy: [SoftwaresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SoftwareCondition
  ): SoftwaresConnection

  """Reads and enables pagination through a set of `Species`."""
  allSpecies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Species`."""
    orderBy: [SpeciesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpeciesCondition
  ): SpeciesConnection

  """
  Reads and enables pagination through a set of `StationaryAcousticEvent`.
  """
  allStationaryAcousticEvents(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StationaryAcousticEvent`."""
    orderBy: [StationaryAcousticEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StationaryAcousticEventCondition
  ): StationaryAcousticEventsConnection

  """
  Reads and enables pagination through a set of `StationaryAcousticImage`.
  """
  allStationaryAcousticImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StationaryAcousticImage`."""
    orderBy: [StationaryAcousticImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StationaryAcousticImageCondition
  ): StationaryAcousticImagesConnection

  """
  Reads and enables pagination through a set of `StationaryAcousticValue`.
  """
  allStationaryAcousticValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StationaryAcousticValue`."""
    orderBy: [StationaryAcousticValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StationaryAcousticValueCondition
  ): StationaryAcousticValuesConnection

  """Reads and enables pagination through a set of `Survey`."""
  allSurveys(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Survey`."""
    orderBy: [SurveysOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SurveyCondition
  ): SurveysConnection
  clutterTypeById(id: Int!): ClutterType
  colonyCountEventById(id: Int!): ColonyCountEvent
  colonyCountSiteSectionEventById(id: Int!): ColonyCountSiteSectionEvent
  colonyCountSiteSectionValueById(id: Int!): ColonyCountSiteSectionValue
  countConfidenceById(id: Int!): CountConfidence
  countMethodById(id: Int!): CountMethod
  deviceById(id: Int!): Device
  deviceTypeById(id: Int!): DeviceType
  environmentalDatumById(id: Int!): EnvironmentalDatum
  habitatTypeById(id: Int!): HabitatType
  howPdPresumedById(id: Int!): HowPdPresumed
  howWnsPresumedById(id: Int!): HowWnsPresumed
  imageById(id: Int!): Image
  laboratoryById(id: Int!): Laboratory
  loggerTypeById(id: Int!): LoggerType
  microphoneHousingTypeById(id: Int!): MicrophoneHousingType
  microphoneOrientationById(id: Int!): MicrophoneOrientation
  microphoneTypeById(id: Int!): MicrophoneType
  mobileAcousticEventById(id: Int!): MobileAcousticEvent
  mobileAcousticValueById(id: Int!): MobileAcousticValue
  organismCountById(id: Int!): OrganismCount
  presumedCauseDeathById(id: Int!): PresumedCauseDeath
  projectReferenceById(id: Int!): ProjectReference
  projectSiteByProjectIdAndSiteId(projectId: Int!, siteId: Int!): ProjectSite
  sampleLevelInformationById(id: Int!): SampleLevelInformation
  sampleTypeById(id: Int!): SampleType
  siteById(id: Int!): Site
  siteLevelById(id: Int!): SiteLevel
  siteMaterialById(id: Int!): SiteMaterial
  siteOrganismCountBySiteIdAndOrganismCountId(siteId: Int!, organismCountId: Int!): SiteOrganismCount
  siteSectionById(id: Int!): SiteSection
  siteSizeById(id: Int!): SiteSize
  siteTypeById(id: Int!): SiteType
  siteUseById(id: Int!): SiteUse
  softwareById(id: Int!): Software
  speciesById(id: Int!): Species
  stationaryAcousticEventById(id: Int!): StationaryAcousticEvent
  stationaryAcousticImageById(id: Int!): StationaryAcousticImage
  stationaryAcousticValueById(id: Int!): StationaryAcousticValue
  surveyById(id: Int!): Survey
  distinctSurveyProjectIds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): DistinctSurveyProjectIdsConnection!

  """Reads and enables pagination through a set of `Site`."""
  hibernaculumSites(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): SitesConnection!

  """Reads and enables pagination through a set of `Site`."""
  maternitySites(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): SitesConnection!

  """Reads a single `ClutterType` using its globally unique `ID`."""
  clutterType(
    """
    The globally unique `ID` to be used in selecting a single `ClutterType`.
    """
    nodeId: ID!
  ): ClutterType

  """Reads a single `ColonyCountEvent` using its globally unique `ID`."""
  colonyCountEvent(
    """
    The globally unique `ID` to be used in selecting a single `ColonyCountEvent`.
    """
    nodeId: ID!
  ): ColonyCountEvent

  """
  Reads a single `ColonyCountSiteSectionEvent` using its globally unique `ID`.
  """
  colonyCountSiteSectionEvent(
    """
    The globally unique `ID` to be used in selecting a single `ColonyCountSiteSectionEvent`.
    """
    nodeId: ID!
  ): ColonyCountSiteSectionEvent

  """
  Reads a single `ColonyCountSiteSectionValue` using its globally unique `ID`.
  """
  colonyCountSiteSectionValue(
    """
    The globally unique `ID` to be used in selecting a single `ColonyCountSiteSectionValue`.
    """
    nodeId: ID!
  ): ColonyCountSiteSectionValue

  """Reads a single `CountConfidence` using its globally unique `ID`."""
  countConfidence(
    """
    The globally unique `ID` to be used in selecting a single `CountConfidence`.
    """
    nodeId: ID!
  ): CountConfidence

  """Reads a single `CountMethod` using its globally unique `ID`."""
  countMethod(
    """
    The globally unique `ID` to be used in selecting a single `CountMethod`.
    """
    nodeId: ID!
  ): CountMethod

  """Reads a single `Device` using its globally unique `ID`."""
  device(
    """The globally unique `ID` to be used in selecting a single `Device`."""
    nodeId: ID!
  ): Device

  """Reads a single `DeviceType` using its globally unique `ID`."""
  deviceType(
    """
    The globally unique `ID` to be used in selecting a single `DeviceType`.
    """
    nodeId: ID!
  ): DeviceType

  """Reads a single `EnvironmentalDatum` using its globally unique `ID`."""
  environmentalDatum(
    """
    The globally unique `ID` to be used in selecting a single `EnvironmentalDatum`.
    """
    nodeId: ID!
  ): EnvironmentalDatum

  """Reads a single `HabitatType` using its globally unique `ID`."""
  habitatType(
    """
    The globally unique `ID` to be used in selecting a single `HabitatType`.
    """
    nodeId: ID!
  ): HabitatType

  """Reads a single `HowPdPresumed` using its globally unique `ID`."""
  howPdPresumed(
    """
    The globally unique `ID` to be used in selecting a single `HowPdPresumed`.
    """
    nodeId: ID!
  ): HowPdPresumed

  """Reads a single `HowWnsPresumed` using its globally unique `ID`."""
  howWnsPresumed(
    """
    The globally unique `ID` to be used in selecting a single `HowWnsPresumed`.
    """
    nodeId: ID!
  ): HowWnsPresumed

  """Reads a single `Image` using its globally unique `ID`."""
  image(
    """The globally unique `ID` to be used in selecting a single `Image`."""
    nodeId: ID!
  ): Image

  """Reads a single `Laboratory` using its globally unique `ID`."""
  laboratory(
    """
    The globally unique `ID` to be used in selecting a single `Laboratory`.
    """
    nodeId: ID!
  ): Laboratory

  """Reads a single `LoggerType` using its globally unique `ID`."""
  loggerType(
    """
    The globally unique `ID` to be used in selecting a single `LoggerType`.
    """
    nodeId: ID!
  ): LoggerType

  """
  Reads a single `MicrophoneHousingType` using its globally unique `ID`.
  """
  microphoneHousingType(
    """
    The globally unique `ID` to be used in selecting a single `MicrophoneHousingType`.
    """
    nodeId: ID!
  ): MicrophoneHousingType

  """
  Reads a single `MicrophoneOrientation` using its globally unique `ID`.
  """
  microphoneOrientation(
    """
    The globally unique `ID` to be used in selecting a single `MicrophoneOrientation`.
    """
    nodeId: ID!
  ): MicrophoneOrientation

  """Reads a single `MicrophoneType` using its globally unique `ID`."""
  microphoneType(
    """
    The globally unique `ID` to be used in selecting a single `MicrophoneType`.
    """
    nodeId: ID!
  ): MicrophoneType

  """Reads a single `MobileAcousticEvent` using its globally unique `ID`."""
  mobileAcousticEvent(
    """
    The globally unique `ID` to be used in selecting a single `MobileAcousticEvent`.
    """
    nodeId: ID!
  ): MobileAcousticEvent

  """Reads a single `MobileAcousticValue` using its globally unique `ID`."""
  mobileAcousticValue(
    """
    The globally unique `ID` to be used in selecting a single `MobileAcousticValue`.
    """
    nodeId: ID!
  ): MobileAcousticValue

  """Reads a single `OrganismCount` using its globally unique `ID`."""
  organismCount(
    """
    The globally unique `ID` to be used in selecting a single `OrganismCount`.
    """
    nodeId: ID!
  ): OrganismCount

  """Reads a single `PresumedCauseDeath` using its globally unique `ID`."""
  presumedCauseDeath(
    """
    The globally unique `ID` to be used in selecting a single `PresumedCauseDeath`.
    """
    nodeId: ID!
  ): PresumedCauseDeath

  """Reads a single `ProjectReference` using its globally unique `ID`."""
  projectReference(
    """
    The globally unique `ID` to be used in selecting a single `ProjectReference`.
    """
    nodeId: ID!
  ): ProjectReference

  """Reads a single `ProjectSite` using its globally unique `ID`."""
  projectSite(
    """
    The globally unique `ID` to be used in selecting a single `ProjectSite`.
    """
    nodeId: ID!
  ): ProjectSite

  """
  Reads a single `SampleLevelInformation` using its globally unique `ID`.
  """
  sampleLevelInformation(
    """
    The globally unique `ID` to be used in selecting a single `SampleLevelInformation`.
    """
    nodeId: ID!
  ): SampleLevelInformation

  """Reads a single `SampleType` using its globally unique `ID`."""
  sampleType(
    """
    The globally unique `ID` to be used in selecting a single `SampleType`.
    """
    nodeId: ID!
  ): SampleType

  """Reads a single `Site` using its globally unique `ID`."""
  site(
    """The globally unique `ID` to be used in selecting a single `Site`."""
    nodeId: ID!
  ): Site

  """Reads a single `SiteLevel` using its globally unique `ID`."""
  siteLevel(
    """
    The globally unique `ID` to be used in selecting a single `SiteLevel`.
    """
    nodeId: ID!
  ): SiteLevel

  """Reads a single `SiteMaterial` using its globally unique `ID`."""
  siteMaterial(
    """
    The globally unique `ID` to be used in selecting a single `SiteMaterial`.
    """
    nodeId: ID!
  ): SiteMaterial

  """Reads a single `SiteOrganismCount` using its globally unique `ID`."""
  siteOrganismCount(
    """
    The globally unique `ID` to be used in selecting a single `SiteOrganismCount`.
    """
    nodeId: ID!
  ): SiteOrganismCount

  """Reads a single `SiteSection` using its globally unique `ID`."""
  siteSection(
    """
    The globally unique `ID` to be used in selecting a single `SiteSection`.
    """
    nodeId: ID!
  ): SiteSection

  """Reads a single `SiteSize` using its globally unique `ID`."""
  siteSize(
    """The globally unique `ID` to be used in selecting a single `SiteSize`."""
    nodeId: ID!
  ): SiteSize

  """Reads a single `SiteType` using its globally unique `ID`."""
  siteType(
    """The globally unique `ID` to be used in selecting a single `SiteType`."""
    nodeId: ID!
  ): SiteType

  """Reads a single `SiteUse` using its globally unique `ID`."""
  siteUse(
    """The globally unique `ID` to be used in selecting a single `SiteUse`."""
    nodeId: ID!
  ): SiteUse

  """Reads a single `Software` using its globally unique `ID`."""
  software(
    """The globally unique `ID` to be used in selecting a single `Software`."""
    nodeId: ID!
  ): Software

  """Reads a single `Species` using its globally unique `ID`."""
  species(
    """The globally unique `ID` to be used in selecting a single `Species`."""
    nodeId: ID!
  ): Species

  """
  Reads a single `StationaryAcousticEvent` using its globally unique `ID`.
  """
  stationaryAcousticEvent(
    """
    The globally unique `ID` to be used in selecting a single `StationaryAcousticEvent`.
    """
    nodeId: ID!
  ): StationaryAcousticEvent

  """
  Reads a single `StationaryAcousticImage` using its globally unique `ID`.
  """
  stationaryAcousticImage(
    """
    The globally unique `ID` to be used in selecting a single `StationaryAcousticImage`.
    """
    nodeId: ID!
  ): StationaryAcousticImage

  """
  Reads a single `StationaryAcousticValue` using its globally unique `ID`.
  """
  stationaryAcousticValue(
    """
    The globally unique `ID` to be used in selecting a single `StationaryAcousticValue`.
    """
    nodeId: ID!
  ): StationaryAcousticValue

  """Reads a single `Survey` using its globally unique `ID`."""
  survey(
    """The globally unique `ID` to be used in selecting a single `Survey`."""
    nodeId: ID!
  ): Survey
}

"""
Sample (be that bat, guano, substrate; see sample_type table) level information
documenting what type of sample was taken and where it was sent
"""
type SampleLevelInformation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!

  """
  Sample ID entered by the user from which other sample-level information can be
  input; we will need to make sure this ID is also universally unique
  """
  sampleId: String!
  sampleTypeId: Int!
  labWhereSampleSentId: Int!
  speciesId: Int!
  rh: Int
  temp: Int
  comments: String

  """
  Reads a single `SampleType` that is related to this `SampleLevelInformation`.
  """
  sampleTypeBySampleTypeId: SampleType

  """
  Reads a single `Laboratory` that is related to this `SampleLevelInformation`.
  """
  laboratoryByLabWhereSampleSentId: Laboratory
}

"""
A condition to be used against `SampleLevelInformation` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SampleLevelInformationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `sampleId` field."""
  sampleId: String

  """Checks for equality with the object’s `sampleTypeId` field."""
  sampleTypeId: Int

  """Checks for equality with the object’s `labWhereSampleSentId` field."""
  labWhereSampleSentId: Int

  """Checks for equality with the object’s `speciesId` field."""
  speciesId: Int

  """Checks for equality with the object’s `rh` field."""
  rh: Int

  """Checks for equality with the object’s `temp` field."""
  temp: Int

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `SampleLevelInformation`"""
input SampleLevelInformationInput {
  id: Int

  """
  Sample ID entered by the user from which other sample-level information can be
  input; we will need to make sure this ID is also universally unique
  """
  sampleId: String!
  sampleTypeId: Int!
  labWhereSampleSentId: Int!
  speciesId: Int!
  rh: Int
  temp: Int
  comments: String
}

"""
Represents an update to a `SampleLevelInformation`. Fields that are set will be updated.
"""
input SampleLevelInformationPatch {
  id: Int

  """
  Sample ID entered by the user from which other sample-level information can be
  input; we will need to make sure this ID is also universally unique
  """
  sampleId: String
  sampleTypeId: Int
  labWhereSampleSentId: Int
  speciesId: Int
  rh: Int
  temp: Int
  comments: String
}

"""A connection to a list of `SampleLevelInformation` values."""
type SampleLevelInformationsConnection {
  """A list of `SampleLevelInformation` objects."""
  nodes: [SampleLevelInformation]!

  """
  A list of edges which contains the `SampleLevelInformation` and cursor to aid in pagination.
  """
  edges: [SampleLevelInformationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampleLevelInformation` you could get from the connection.
  """
  totalCount: Int
}

"""A `SampleLevelInformation` edge in the connection."""
type SampleLevelInformationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampleLevelInformation` at the end of the edge."""
  node: SampleLevelInformation
}

"""Methods to use when ordering `SampleLevelInformation`."""
enum SampleLevelInformationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SAMPLE_ID_ASC
  SAMPLE_ID_DESC
  SAMPLE_TYPE_ID_ASC
  SAMPLE_TYPE_ID_DESC
  LAB_WHERE_SAMPLE_SENT_ID_ASC
  LAB_WHERE_SAMPLE_SENT_ID_DESC
  SPECIES_ID_ASC
  SPECIES_ID_DESC
  RH_ASC
  RH_DESC
  TEMP_ASC
  TEMP_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Table provides a list of options for sample type - e.g. qPCR swab - bat, qPCR
swab - substrate, qPCR swab - guano, guano, biopsy punch, culture swab, UV wing
photo, whole specimen
"""
type SampleType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  sampleType: String!
  comments: String

  """
  Reads and enables pagination through a set of `SampleLevelInformation`.
  """
  sampleLevelInformationsBySampleTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampleLevelInformation`."""
    orderBy: [SampleLevelInformationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampleLevelInformationCondition
  ): SampleLevelInformationsConnection!
}

"""
A condition to be used against `SampleType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SampleTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `sampleType` field."""
  sampleType: String

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `SampleType`"""
input SampleTypeInput {
  id: Int
  sampleType: String!
  comments: String
}

"""
Represents an update to a `SampleType`. Fields that are set will be updated.
"""
input SampleTypePatch {
  id: Int
  sampleType: String
  comments: String
}

"""A connection to a list of `SampleType` values."""
type SampleTypesConnection {
  """A list of `SampleType` objects."""
  nodes: [SampleType]!

  """
  A list of edges which contains the `SampleType` and cursor to aid in pagination.
  """
  edges: [SampleTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SampleType` you could get from the connection."""
  totalCount: Int
}

"""A `SampleType` edge in the connection."""
type SampleTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampleType` at the end of the edge."""
  node: SampleType
}

"""Methods to use when ordering `SampleType`."""
enum SampleTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SAMPLE_TYPE_ASC
  SAMPLE_TYPE_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Table that stores meta data about a site."""
type Site implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  siteName: String
  grtsId: Int!
  siteTypeId: Int
  siteMaterialId: Int
  siteUseId: Int
  siteSizeId: Int

  """
  Hibernacula characteristic to help describe the relative size and complexity
  of the site based on the number of openings in the hibernacula.
  """
  numberOpenings: Int

  """
  Hibernacula characteristic to help describe the relative size and complexity
  of the site based on the number of passages in the hibernacula 
  """
  numberPassages: Int

  """
  Yes if they have a site map; should create a place for site map to be uploaded
  """
  siteMap: Boolean
  comments: String

  """Reads a single `SiteType` that is related to this `Site`."""
  siteTypeBySiteTypeId: SiteType

  """Reads a single `SiteMaterial` that is related to this `Site`."""
  siteMaterialBySiteMaterialId: SiteMaterial

  """Reads a single `SiteUse` that is related to this `Site`."""
  siteUseBySiteUseId: SiteUse

  """Reads a single `SiteSize` that is related to this `Site`."""
  siteSizeBySiteSizeId: SiteSize

  """Reads and enables pagination through a set of `ProjectSite`."""
  projectSitesBySiteId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectSite`."""
    orderBy: [ProjectSitesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectSiteCondition
  ): ProjectSitesConnection!

  """Reads and enables pagination through a set of `SiteOrganismCount`."""
  siteOrganismCountsBySiteId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SiteOrganismCount`."""
    orderBy: [SiteOrganismCountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SiteOrganismCountCondition
  ): SiteOrganismCountsConnection!

  """Reads and enables pagination through a set of `SiteSection`."""
  siteSectionsBySiteId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SiteSection`."""
    orderBy: [SiteSectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SiteSectionCondition
  ): SiteSectionsConnection!
}

"""
A condition to be used against `Site` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SiteCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `siteName` field."""
  siteName: String

  """Checks for equality with the object’s `grtsId` field."""
  grtsId: Int

  """Checks for equality with the object’s `siteTypeId` field."""
  siteTypeId: Int

  """Checks for equality with the object’s `siteMaterialId` field."""
  siteMaterialId: Int

  """Checks for equality with the object’s `siteUseId` field."""
  siteUseId: Int

  """Checks for equality with the object’s `siteSizeId` field."""
  siteSizeId: Int

  """Checks for equality with the object’s `numberOpenings` field."""
  numberOpenings: Int

  """Checks for equality with the object’s `numberPassages` field."""
  numberPassages: Int

  """Checks for equality with the object’s `siteMap` field."""
  siteMap: Boolean

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `Site`"""
input SiteInput {
  id: Int
  siteName: String
  grtsId: Int!
  siteTypeId: Int
  siteMaterialId: Int
  siteUseId: Int
  siteSizeId: Int

  """
  Hibernacula characteristic to help describe the relative size and complexity
  of the site based on the number of openings in the hibernacula.
  """
  numberOpenings: Int

  """
  Hibernacula characteristic to help describe the relative size and complexity
  of the site based on the number of passages in the hibernacula 
  """
  numberPassages: Int

  """
  Yes if they have a site map; should create a place for site map to be uploaded
  """
  siteMap: Boolean
  comments: String
}

type SiteLevel implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!

  """
  Site level is a drop-down menu containing options for data entered at the following levels: site, section, cluster, etc.
  """
  level: String
  comments: String

  """Reads and enables pagination through a set of `SiteSection`."""
  siteSectionsBySiteLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SiteSection`."""
    orderBy: [SiteSectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SiteSectionCondition
  ): SiteSectionsConnection!
}

"""
A condition to be used against `SiteLevel` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SiteLevelCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `level` field."""
  level: String

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `SiteLevel`"""
input SiteLevelInput {
  id: Int

  """
  Site level is a drop-down menu containing options for data entered at the following levels: site, section, cluster, etc.
  """
  level: String
  comments: String
}

"""
Represents an update to a `SiteLevel`. Fields that are set will be updated.
"""
input SiteLevelPatch {
  id: Int

  """
  Site level is a drop-down menu containing options for data entered at the following levels: site, section, cluster, etc.
  """
  level: String
  comments: String
}

"""A connection to a list of `SiteLevel` values."""
type SiteLevelsConnection {
  """A list of `SiteLevel` objects."""
  nodes: [SiteLevel]!

  """
  A list of edges which contains the `SiteLevel` and cursor to aid in pagination.
  """
  edges: [SiteLevelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SiteLevel` you could get from the connection."""
  totalCount: Int
}

"""A `SiteLevel` edge in the connection."""
type SiteLevelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SiteLevel` at the end of the edge."""
  node: SiteLevel
}

"""Methods to use when ordering `SiteLevel`."""
enum SiteLevelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  LEVEL_ASC
  LEVEL_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SiteMaterial implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!

  """
  Site material is a list of different types of materials that a site consists
  of, including limestone, gypsum, etc. Could be one or several materials.
  """
  material: String
  comments: String

  """Reads and enables pagination through a set of `Site`."""
  sitesBySiteMaterialId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Site`."""
    orderBy: [SitesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SiteCondition
  ): SitesConnection!
}

"""
A condition to be used against `SiteMaterial` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SiteMaterialCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `material` field."""
  material: String

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `SiteMaterial`"""
input SiteMaterialInput {
  id: Int

  """
  Site material is a list of different types of materials that a site consists
  of, including limestone, gypsum, etc. Could be one or several materials.
  """
  material: String
  comments: String
}

"""
Represents an update to a `SiteMaterial`. Fields that are set will be updated.
"""
input SiteMaterialPatch {
  id: Int

  """
  Site material is a list of different types of materials that a site consists
  of, including limestone, gypsum, etc. Could be one or several materials.
  """
  material: String
  comments: String
}

"""A connection to a list of `SiteMaterial` values."""
type SiteMaterialsConnection {
  """A list of `SiteMaterial` objects."""
  nodes: [SiteMaterial]!

  """
  A list of edges which contains the `SiteMaterial` and cursor to aid in pagination.
  """
  edges: [SiteMaterialsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SiteMaterial` you could get from the connection."""
  totalCount: Int
}

"""A `SiteMaterial` edge in the connection."""
type SiteMaterialsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SiteMaterial` at the end of the edge."""
  node: SiteMaterial
}

"""Methods to use when ordering `SiteMaterial`."""
enum SiteMaterialsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MATERIAL_ASC
  MATERIAL_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SiteOrganismCount implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  siteId: Int!
  organismCountId: Int!

  """Reads a single `Site` that is related to this `SiteOrganismCount`."""
  siteBySiteId: Site

  """
  Reads a single `OrganismCount` that is related to this `SiteOrganismCount`.
  """
  organismCountByOrganismCountId: OrganismCount
}

"""
A condition to be used against `SiteOrganismCount` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SiteOrganismCountCondition {
  """Checks for equality with the object’s `siteId` field."""
  siteId: Int

  """Checks for equality with the object’s `organismCountId` field."""
  organismCountId: Int
}

"""An input for mutations affecting `SiteOrganismCount`"""
input SiteOrganismCountInput {
  siteId: Int!
  organismCountId: Int!
}

"""
Represents an update to a `SiteOrganismCount`. Fields that are set will be updated.
"""
input SiteOrganismCountPatch {
  siteId: Int
  organismCountId: Int
}

"""A connection to a list of `SiteOrganismCount` values."""
type SiteOrganismCountsConnection {
  """A list of `SiteOrganismCount` objects."""
  nodes: [SiteOrganismCount]!

  """
  A list of edges which contains the `SiteOrganismCount` and cursor to aid in pagination.
  """
  edges: [SiteOrganismCountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SiteOrganismCount` you could get from the connection.
  """
  totalCount: Int
}

"""A `SiteOrganismCount` edge in the connection."""
type SiteOrganismCountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SiteOrganismCount` at the end of the edge."""
  node: SiteOrganismCount
}

"""Methods to use when ordering `SiteOrganismCount`."""
enum SiteOrganismCountsOrderBy {
  NATURAL
  SITE_ID_ASC
  SITE_ID_DESC
  ORGANISM_COUNT_ID_ASC
  ORGANISM_COUNT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Site`. Fields that are set will be updated.
"""
input SitePatch {
  id: Int
  siteName: String
  grtsId: Int
  siteTypeId: Int
  siteMaterialId: Int
  siteUseId: Int
  siteSizeId: Int

  """
  Hibernacula characteristic to help describe the relative size and complexity
  of the site based on the number of openings in the hibernacula.
  """
  numberOpenings: Int

  """
  Hibernacula characteristic to help describe the relative size and complexity
  of the site based on the number of passages in the hibernacula 
  """
  numberPassages: Int

  """
  Yes if they have a site map; should create a place for site map to be uploaded
  """
  siteMap: Boolean
  comments: String
}

"""A connection to a list of `Site` values."""
type SitesConnection {
  """A list of `Site` objects."""
  nodes: [Site]!

  """
  A list of edges which contains the `Site` and cursor to aid in pagination.
  """
  edges: [SitesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Site` you could get from the connection."""
  totalCount: Int
}

type SiteSection implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  siteId: Int!
  siteLevelId: Int!

  """
  Site section represents the section of the site at which a count was conducted.
  """
  section: String
  comments: String

  """Reads a single `Site` that is related to this `SiteSection`."""
  siteBySiteId: Site

  """Reads a single `SiteLevel` that is related to this `SiteSection`."""
  siteLevelBySiteLevelId: SiteLevel

  """
  Reads and enables pagination through a set of `ColonyCountSiteSectionEvent`.
  """
  colonyCountSiteSectionEventsBySiteSectionId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ColonyCountSiteSectionEvent`."""
    orderBy: [ColonyCountSiteSectionEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ColonyCountSiteSectionEventCondition
  ): ColonyCountSiteSectionEventsConnection!
}

"""
A condition to be used against `SiteSection` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SiteSectionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `siteId` field."""
  siteId: Int

  """Checks for equality with the object’s `siteLevelId` field."""
  siteLevelId: Int

  """Checks for equality with the object’s `section` field."""
  section: String

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `SiteSection`"""
input SiteSectionInput {
  id: Int
  siteId: Int!
  siteLevelId: Int!

  """
  Site section represents the section of the site at which a count was conducted.
  """
  section: String
  comments: String
}

"""
Represents an update to a `SiteSection`. Fields that are set will be updated.
"""
input SiteSectionPatch {
  id: Int
  siteId: Int
  siteLevelId: Int

  """
  Site section represents the section of the site at which a count was conducted.
  """
  section: String
  comments: String
}

"""A connection to a list of `SiteSection` values."""
type SiteSectionsConnection {
  """A list of `SiteSection` objects."""
  nodes: [SiteSection]!

  """
  A list of edges which contains the `SiteSection` and cursor to aid in pagination.
  """
  edges: [SiteSectionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SiteSection` you could get from the connection."""
  totalCount: Int
}

"""A `SiteSection` edge in the connection."""
type SiteSectionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SiteSection` at the end of the edge."""
  node: SiteSection
}

"""Methods to use when ordering `SiteSection`."""
enum SiteSectionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SITE_ID_ASC
  SITE_ID_DESC
  SITE_LEVEL_ID_ASC
  SITE_LEVEL_ID_DESC
  SECTION_ASC
  SECTION_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A `Site` edge in the connection."""
type SitesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Site` at the end of the edge."""
  node: Site
}

type SiteSize implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!

  """
  Site size are general categories with definitions of a very small, small, medium, large, and very large site.
  """
  size: String
  comments: String

  """Reads and enables pagination through a set of `Site`."""
  sitesBySiteSizeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Site`."""
    orderBy: [SitesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SiteCondition
  ): SitesConnection!
}

"""
A condition to be used against `SiteSize` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SiteSizeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `size` field."""
  size: String

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `SiteSize`"""
input SiteSizeInput {
  id: Int

  """
  Site size are general categories with definitions of a very small, small, medium, large, and very large site.
  """
  size: String
  comments: String
}

"""
Represents an update to a `SiteSize`. Fields that are set will be updated.
"""
input SiteSizePatch {
  id: Int

  """
  Site size are general categories with definitions of a very small, small, medium, large, and very large site.
  """
  size: String
  comments: String
}

"""A connection to a list of `SiteSize` values."""
type SiteSizesConnection {
  """A list of `SiteSize` objects."""
  nodes: [SiteSize]!

  """
  A list of edges which contains the `SiteSize` and cursor to aid in pagination.
  """
  edges: [SiteSizesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SiteSize` you could get from the connection."""
  totalCount: Int
}

"""A `SiteSize` edge in the connection."""
type SiteSizesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SiteSize` at the end of the edge."""
  node: SiteSize
}

"""Methods to use when ordering `SiteSize`."""
enum SiteSizesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SIZE_ASC
  SIZE_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Site`."""
enum SitesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SITE_NAME_ASC
  SITE_NAME_DESC
  GRTS_ID_ASC
  GRTS_ID_DESC
  SITE_TYPE_ID_ASC
  SITE_TYPE_ID_DESC
  SITE_MATERIAL_ID_ASC
  SITE_MATERIAL_ID_DESC
  SITE_USE_ID_ASC
  SITE_USE_ID_DESC
  SITE_SIZE_ID_ASC
  SITE_SIZE_ID_DESC
  NUMBER_OPENINGS_ASC
  NUMBER_OPENINGS_DESC
  NUMBER_PASSAGES_ASC
  NUMBER_PASSAGES_DESC
  SITE_MAP_ASC
  SITE_MAP_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SiteType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!

  """
  Site type describes the type of site and is a pull down list of options: cave, mine, tunnel, culvert, etc.
  """
  type: String
  comments: String

  """Reads and enables pagination through a set of `Site`."""
  sitesBySiteTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Site`."""
    orderBy: [SitesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SiteCondition
  ): SitesConnection!
}

"""
A condition to be used against `SiteType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SiteTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `SiteType`"""
input SiteTypeInput {
  id: Int

  """
  Site type describes the type of site and is a pull down list of options: cave, mine, tunnel, culvert, etc.
  """
  type: String
  comments: String
}

"""
Represents an update to a `SiteType`. Fields that are set will be updated.
"""
input SiteTypePatch {
  id: Int

  """
  Site type describes the type of site and is a pull down list of options: cave, mine, tunnel, culvert, etc.
  """
  type: String
  comments: String
}

"""A connection to a list of `SiteType` values."""
type SiteTypesConnection {
  """A list of `SiteType` objects."""
  nodes: [SiteType]!

  """
  A list of edges which contains the `SiteType` and cursor to aid in pagination.
  """
  edges: [SiteTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SiteType` you could get from the connection."""
  totalCount: Int
}

"""A `SiteType` edge in the connection."""
type SiteTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SiteType` at the end of the edge."""
  node: SiteType
}

"""Methods to use when ordering `SiteType`."""
enum SiteTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TYPE_ASC
  TYPE_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SiteUse implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!

  """
  Site use describes the use of the site, which can be one or more of the following: winter roost, summer roost, fall swarm
  """
  description: String
  comments: String

  """Reads and enables pagination through a set of `Site`."""
  sitesBySiteUseId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Site`."""
    orderBy: [SitesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SiteCondition
  ): SitesConnection!
}

"""
A condition to be used against `SiteUse` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SiteUseCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `comments` field."""
  comments: String
}

"""An input for mutations affecting `SiteUse`"""
input SiteUseInput {
  id: Int

  """
  Site use describes the use of the site, which can be one or more of the following: winter roost, summer roost, fall swarm
  """
  description: String
  comments: String
}

"""
Represents an update to a `SiteUse`. Fields that are set will be updated.
"""
input SiteUsePatch {
  id: Int

  """
  Site use describes the use of the site, which can be one or more of the following: winter roost, summer roost, fall swarm
  """
  description: String
  comments: String
}

"""A connection to a list of `SiteUse` values."""
type SiteUsesConnection {
  """A list of `SiteUse` objects."""
  nodes: [SiteUse]!

  """
  A list of edges which contains the `SiteUse` and cursor to aid in pagination.
  """
  edges: [SiteUsesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SiteUse` you could get from the connection."""
  totalCount: Int
}

"""A `SiteUse` edge in the connection."""
type SiteUsesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SiteUse` at the end of the edge."""
  node: SiteUse
}

"""Methods to use when ordering `SiteUse`."""
enum SiteUsesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Table identifies bat species to family, genus and species.  If no species
information, id is to genus, if no genus id is to family
"""
type Software implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  developer: String
  versionNumber: String

  """Reads and enables pagination through a set of `MobileAcousticValue`."""
  mobileAcousticValuesBySoftwareId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MobileAcousticValue`."""
    orderBy: [MobileAcousticValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MobileAcousticValueCondition
  ): MobileAcousticValuesConnection!

  """
  Reads and enables pagination through a set of `StationaryAcousticValue`.
  """
  stationaryAcousticValuesBySoftwareId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StationaryAcousticValue`."""
    orderBy: [StationaryAcousticValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StationaryAcousticValueCondition
  ): StationaryAcousticValuesConnection!
}

"""
A condition to be used against `Software` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SoftwareCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `developer` field."""
  developer: String

  """Checks for equality with the object’s `versionNumber` field."""
  versionNumber: String
}

"""An input for mutations affecting `Software`"""
input SoftwareInput {
  id: Int
  name: String
  developer: String
  versionNumber: String
}

"""
Represents an update to a `Software`. Fields that are set will be updated.
"""
input SoftwarePatch {
  id: Int
  name: String
  developer: String
  versionNumber: String
}

"""A connection to a list of `Software` values."""
type SoftwaresConnection {
  """A list of `Software` objects."""
  nodes: [Software]!

  """
  A list of edges which contains the `Software` and cursor to aid in pagination.
  """
  edges: [SoftwaresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Software` you could get from the connection."""
  totalCount: Int
}

"""A `Software` edge in the connection."""
type SoftwaresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Software` at the end of the edge."""
  node: Software
}

"""Methods to use when ordering `Software`."""
enum SoftwaresOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DEVELOPER_ASC
  DEVELOPER_DESC
  VERSION_NUMBER_ASC
  VERSION_NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Species implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  speciesCode: String
  family: String
  genus: String
  species: String
  commonName: String

  """
  Reads and enables pagination through a set of `ColonyCountSiteSectionValue`.
  """
  colonyCountSiteSectionValuesBySpeciesId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ColonyCountSiteSectionValue`."""
    orderBy: [ColonyCountSiteSectionValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ColonyCountSiteSectionValueCondition
  ): ColonyCountSiteSectionValuesConnection!

  """Reads and enables pagination through a set of `MobileAcousticValue`."""
  mobileAcousticValuesBySpeciesId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MobileAcousticValue`."""
    orderBy: [MobileAcousticValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MobileAcousticValueCondition
  ): MobileAcousticValuesConnection!

  """
  Reads and enables pagination through a set of `StationaryAcousticValue`.
  """
  stationaryAcousticValuesBySpeciesId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StationaryAcousticValue`."""
    orderBy: [StationaryAcousticValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StationaryAcousticValueCondition
  ): StationaryAcousticValuesConnection!
}

"""
A condition to be used against `Species` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SpeciesCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `speciesCode` field."""
  speciesCode: String

  """Checks for equality with the object’s `family` field."""
  family: String

  """Checks for equality with the object’s `genus` field."""
  genus: String

  """Checks for equality with the object’s `species` field."""
  species: String

  """Checks for equality with the object’s `commonName` field."""
  commonName: String
}

"""A connection to a list of `Species` values."""
type SpeciesConnection {
  """A list of `Species` objects."""
  nodes: [Species]!

  """
  A list of edges which contains the `Species` and cursor to aid in pagination.
  """
  edges: [SpeciesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Species` you could get from the connection."""
  totalCount: Int
}

"""A `Species` edge in the connection."""
type SpeciesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Species` at the end of the edge."""
  node: Species
}

"""An input for mutations affecting `Species`"""
input SpeciesInput {
  id: Int
  speciesCode: String
  family: String
  genus: String
  species: String
  commonName: String
}

"""Methods to use when ordering `Species`."""
enum SpeciesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SPECIES_CODE_ASC
  SPECIES_CODE_DESC
  FAMILY_ASC
  FAMILY_DESC
  GENUS_ASC
  GENUS_DESC
  SPECIES_ASC
  SPECIES_DESC
  COMMON_NAME_ASC
  COMMON_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Species`. Fields that are set will be updated.
"""
input SpeciesPatch {
  id: Int
  speciesCode: String
  family: String
  genus: String
  species: String
  commonName: String
}

"""
Table that stores the meta data about a given stationary acoustic monitoring
event.  Allows for multiple locations and nights to be linked as same survey
"""
type StationaryAcousticEvent implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  surveyId: Int!
  night: Date
  activationStartTime: Datetime
  activationEndTime: Datetime
  deviceId: Int
  microphoneOrientationId: Int
  microphoneHeight: Float
  clutterTypeId: Int
  clutterPercent: Float
  comments: String
  createdBy: String
  createdDate: Date
  lastModifiedBy: String
  lastModifiedDate: Date

  """
  Reads a single `Survey` that is related to this `StationaryAcousticEvent`.
  """
  surveyBySurveyId: Survey

  """
  Reads a single `Device` that is related to this `StationaryAcousticEvent`.
  """
  deviceByDeviceId: Device

  """
  Reads a single `MicrophoneOrientation` that is related to this `StationaryAcousticEvent`.
  """
  microphoneOrientationByMicrophoneOrientationId: MicrophoneOrientation

  """
  Reads a single `ClutterType` that is related to this `StationaryAcousticEvent`.
  """
  clutterTypeByClutterTypeId: ClutterType

  """
  Reads and enables pagination through a set of `StationaryAcousticImage`.
  """
  stationaryAcousticImagesByStationaryAcousticEventId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StationaryAcousticImage`."""
    orderBy: [StationaryAcousticImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StationaryAcousticImageCondition
  ): StationaryAcousticImagesConnection!

  """
  Reads and enables pagination through a set of `StationaryAcousticValue`.
  """
  stationaryAcousticValuesBySaSurveyId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StationaryAcousticValue`."""
    orderBy: [StationaryAcousticValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StationaryAcousticValueCondition
  ): StationaryAcousticValuesConnection!
}

"""
A condition to be used against `StationaryAcousticEvent` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input StationaryAcousticEventCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `surveyId` field."""
  surveyId: Int

  """Checks for equality with the object’s `night` field."""
  night: Date

  """Checks for equality with the object’s `activationStartTime` field."""
  activationStartTime: Datetime

  """Checks for equality with the object’s `activationEndTime` field."""
  activationEndTime: Datetime

  """Checks for equality with the object’s `deviceId` field."""
  deviceId: Int

  """
  Checks for equality with the object’s `microphoneOrientationId` field.
  """
  microphoneOrientationId: Int

  """Checks for equality with the object’s `microphoneHeight` field."""
  microphoneHeight: Float

  """Checks for equality with the object’s `clutterTypeId` field."""
  clutterTypeId: Int

  """Checks for equality with the object’s `clutterPercent` field."""
  clutterPercent: Float

  """Checks for equality with the object’s `comments` field."""
  comments: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Date

  """Checks for equality with the object’s `lastModifiedBy` field."""
  lastModifiedBy: String

  """Checks for equality with the object’s `lastModifiedDate` field."""
  lastModifiedDate: Date
}

"""An input for mutations affecting `StationaryAcousticEvent`"""
input StationaryAcousticEventInput {
  id: Int
  surveyId: Int!
  night: Date
  activationStartTime: Datetime
  activationEndTime: Datetime
  deviceId: Int
  microphoneOrientationId: Int
  microphoneHeight: Float
  clutterTypeId: Int
  clutterPercent: Float
  comments: String
  createdBy: String
  createdDate: Date
  lastModifiedBy: String
  lastModifiedDate: Date
}

"""
Represents an update to a `StationaryAcousticEvent`. Fields that are set will be updated.
"""
input StationaryAcousticEventPatch {
  id: Int
  surveyId: Int
  night: Date
  activationStartTime: Datetime
  activationEndTime: Datetime
  deviceId: Int
  microphoneOrientationId: Int
  microphoneHeight: Float
  clutterTypeId: Int
  clutterPercent: Float
  comments: String
  createdBy: String
  createdDate: Date
  lastModifiedBy: String
  lastModifiedDate: Date
}

"""A connection to a list of `StationaryAcousticEvent` values."""
type StationaryAcousticEventsConnection {
  """A list of `StationaryAcousticEvent` objects."""
  nodes: [StationaryAcousticEvent]!

  """
  A list of edges which contains the `StationaryAcousticEvent` and cursor to aid in pagination.
  """
  edges: [StationaryAcousticEventsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `StationaryAcousticEvent` you could get from the connection.
  """
  totalCount: Int
}

"""A `StationaryAcousticEvent` edge in the connection."""
type StationaryAcousticEventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StationaryAcousticEvent` at the end of the edge."""
  node: StationaryAcousticEvent
}

"""Methods to use when ordering `StationaryAcousticEvent`."""
enum StationaryAcousticEventsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SURVEY_ID_ASC
  SURVEY_ID_DESC
  NIGHT_ASC
  NIGHT_DESC
  ACTIVATION_START_TIME_ASC
  ACTIVATION_START_TIME_DESC
  ACTIVATION_END_TIME_ASC
  ACTIVATION_END_TIME_DESC
  DEVICE_ID_ASC
  DEVICE_ID_DESC
  MICROPHONE_ORIENTATION_ID_ASC
  MICROPHONE_ORIENTATION_ID_DESC
  MICROPHONE_HEIGHT_ASC
  MICROPHONE_HEIGHT_DESC
  CLUTTER_TYPE_ID_ASC
  CLUTTER_TYPE_ID_DESC
  CLUTTER_PERCENT_ASC
  CLUTTER_PERCENT_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  LAST_MODIFIED_BY_ASC
  LAST_MODIFIED_BY_DESC
  LAST_MODIFIED_DATE_ASC
  LAST_MODIFIED_DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Associative table btwn images and stationary_acoustic_event"""
type StationaryAcousticImage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  imageId: Int
  stationaryAcousticEventId: Int

  """
  Reads a single `Image` that is related to this `StationaryAcousticImage`.
  """
  imageByImageId: Image

  """
  Reads a single `StationaryAcousticEvent` that is related to this `StationaryAcousticImage`.
  """
  stationaryAcousticEventByStationaryAcousticEventId: StationaryAcousticEvent
}

"""
A condition to be used against `StationaryAcousticImage` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input StationaryAcousticImageCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `imageId` field."""
  imageId: Int

  """
  Checks for equality with the object’s `stationaryAcousticEventId` field.
  """
  stationaryAcousticEventId: Int
}

"""An input for mutations affecting `StationaryAcousticImage`"""
input StationaryAcousticImageInput {
  id: Int
  imageId: Int
  stationaryAcousticEventId: Int
}

"""
Represents an update to a `StationaryAcousticImage`. Fields that are set will be updated.
"""
input StationaryAcousticImagePatch {
  id: Int
  imageId: Int
  stationaryAcousticEventId: Int
}

"""A connection to a list of `StationaryAcousticImage` values."""
type StationaryAcousticImagesConnection {
  """A list of `StationaryAcousticImage` objects."""
  nodes: [StationaryAcousticImage]!

  """
  A list of edges which contains the `StationaryAcousticImage` and cursor to aid in pagination.
  """
  edges: [StationaryAcousticImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `StationaryAcousticImage` you could get from the connection.
  """
  totalCount: Int
}

"""A `StationaryAcousticImage` edge in the connection."""
type StationaryAcousticImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StationaryAcousticImage` at the end of the edge."""
  node: StationaryAcousticImage
}

"""Methods to use when ordering `StationaryAcousticImage`."""
enum StationaryAcousticImagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  STATIONARY_ACOUSTIC_EVENT_ID_ASC
  STATIONARY_ACOUSTIC_EVENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type StationaryAcousticValue implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  saSurveyId: Int
  recordingTime: Datetime
  softwareId: Int
  speciesId: Int
  wavFileName: String

  """
  Reads a single `StationaryAcousticEvent` that is related to this `StationaryAcousticValue`.
  """
  stationaryAcousticEventBySaSurveyId: StationaryAcousticEvent

  """
  Reads a single `Software` that is related to this `StationaryAcousticValue`.
  """
  softwareBySoftwareId: Software

  """
  Reads a single `Species` that is related to this `StationaryAcousticValue`.
  """
  speciesBySpeciesId: Species
}

"""
A condition to be used against `StationaryAcousticValue` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input StationaryAcousticValueCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `saSurveyId` field."""
  saSurveyId: Int

  """Checks for equality with the object’s `recordingTime` field."""
  recordingTime: Datetime

  """Checks for equality with the object’s `softwareId` field."""
  softwareId: Int

  """Checks for equality with the object’s `speciesId` field."""
  speciesId: Int

  """Checks for equality with the object’s `wavFileName` field."""
  wavFileName: String
}

"""An input for mutations affecting `StationaryAcousticValue`"""
input StationaryAcousticValueInput {
  id: Int
  saSurveyId: Int
  recordingTime: Datetime
  softwareId: Int
  speciesId: Int
  wavFileName: String
}

"""
Represents an update to a `StationaryAcousticValue`. Fields that are set will be updated.
"""
input StationaryAcousticValuePatch {
  id: Int
  saSurveyId: Int
  recordingTime: Datetime
  softwareId: Int
  speciesId: Int
  wavFileName: String
}

"""A connection to a list of `StationaryAcousticValue` values."""
type StationaryAcousticValuesConnection {
  """A list of `StationaryAcousticValue` objects."""
  nodes: [StationaryAcousticValue]!

  """
  A list of edges which contains the `StationaryAcousticValue` and cursor to aid in pagination.
  """
  edges: [StationaryAcousticValuesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `StationaryAcousticValue` you could get from the connection.
  """
  totalCount: Int
}

"""A `StationaryAcousticValue` edge in the connection."""
type StationaryAcousticValuesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StationaryAcousticValue` at the end of the edge."""
  node: StationaryAcousticValue
}

"""Methods to use when ordering `StationaryAcousticValue`."""
enum StationaryAcousticValuesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SA_SURVEY_ID_ASC
  SA_SURVEY_ID_DESC
  RECORDING_TIME_ASC
  RECORDING_TIME_DESC
  SOFTWARE_ID_ASC
  SOFTWARE_ID_DESC
  SPECIES_ID_ASC
  SPECIES_ID_DESC
  WAV_FILE_NAME_ASC
  WAV_FILE_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A device is the specific device type and microphone used for a given deployment on stationary or acoutic monitoring surveys
"""
type Survey implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  projectId: Int!
  startDate: Date
  grtsId: Int

  """Reads and enables pagination through a set of `ColonyCountEvent`."""
  colonyCountEventsBySurveyId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ColonyCountEvent`."""
    orderBy: [ColonyCountEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ColonyCountEventCondition
  ): ColonyCountEventsConnection!

  """Reads and enables pagination through a set of `MobileAcousticEvent`."""
  mobileAcousticEventsBySurveyId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MobileAcousticEvent`."""
    orderBy: [MobileAcousticEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MobileAcousticEventCondition
  ): MobileAcousticEventsConnection!

  """
  Reads and enables pagination through a set of `StationaryAcousticEvent`.
  """
  stationaryAcousticEventsBySurveyId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StationaryAcousticEvent`."""
    orderBy: [StationaryAcousticEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StationaryAcousticEventCondition
  ): StationaryAcousticEventsConnection!
}

"""
A condition to be used against `Survey` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SurveyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int

  """Checks for equality with the object’s `startDate` field."""
  startDate: Date

  """Checks for equality with the object’s `grtsId` field."""
  grtsId: Int
}

"""An input for mutations affecting `Survey`"""
input SurveyInput {
  id: Int
  projectId: Int!
  startDate: Date
  grtsId: Int
}

"""
Represents an update to a `Survey`. Fields that are set will be updated.
"""
input SurveyPatch {
  id: Int
  projectId: Int
  startDate: Date
  grtsId: Int
}

"""A connection to a list of `Survey` values."""
type SurveysConnection {
  """A list of `Survey` objects."""
  nodes: [Survey]!

  """
  A list of edges which contains the `Survey` and cursor to aid in pagination.
  """
  edges: [SurveysEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Survey` you could get from the connection."""
  totalCount: Int
}

"""A `Survey` edge in the connection."""
type SurveysEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Survey` at the end of the edge."""
  node: Survey
}

"""Methods to use when ordering `Survey`."""
enum SurveysOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  START_DATE_ASC
  START_DATE_DESC
  GRTS_ID_ASC
  GRTS_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateClutterTypeById` mutation."""
input UpdateClutterTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ClutterType` being updated.
  """
  clutterTypePatch: ClutterTypePatch!
  id: Int!
}

"""All input for the `updateClutterType` mutation."""
input UpdateClutterTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ClutterType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ClutterType` being updated.
  """
  clutterTypePatch: ClutterTypePatch!
}

"""The output of our update `ClutterType` mutation."""
type UpdateClutterTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ClutterType` that was updated by this mutation."""
  clutterType: ClutterType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ClutterType`. May be used by Relay 1."""
  clutterTypeEdge(
    """The method to use when ordering `ClutterType`."""
    orderBy: [ClutterTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ClutterTypesEdge
}

"""All input for the `updateColonyCountEventById` mutation."""
input UpdateColonyCountEventByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ColonyCountEvent` being updated.
  """
  colonyCountEventPatch: ColonyCountEventPatch!
  id: Int!
}

"""All input for the `updateColonyCountEvent` mutation."""
input UpdateColonyCountEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ColonyCountEvent` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ColonyCountEvent` being updated.
  """
  colonyCountEventPatch: ColonyCountEventPatch!
}

"""The output of our update `ColonyCountEvent` mutation."""
type UpdateColonyCountEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ColonyCountEvent` that was updated by this mutation."""
  colonyCountEvent: ColonyCountEvent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `ColonyCountEvent`."""
  surveyBySurveyId: Survey

  """An edge for our `ColonyCountEvent`. May be used by Relay 1."""
  colonyCountEventEdge(
    """The method to use when ordering `ColonyCountEvent`."""
    orderBy: [ColonyCountEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ColonyCountEventsEdge
}

"""All input for the `updateColonyCountSiteSectionEventById` mutation."""
input UpdateColonyCountSiteSectionEventByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ColonyCountSiteSectionEvent` being updated.
  """
  colonyCountSiteSectionEventPatch: ColonyCountSiteSectionEventPatch!
  id: Int!
}

"""All input for the `updateColonyCountSiteSectionEvent` mutation."""
input UpdateColonyCountSiteSectionEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ColonyCountSiteSectionEvent` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ColonyCountSiteSectionEvent` being updated.
  """
  colonyCountSiteSectionEventPatch: ColonyCountSiteSectionEventPatch!
}

"""The output of our update `ColonyCountSiteSectionEvent` mutation."""
type UpdateColonyCountSiteSectionEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ColonyCountSiteSectionEvent` that was updated by this mutation."""
  colonyCountSiteSectionEvent: ColonyCountSiteSectionEvent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ColonyCountEvent` that is related to this `ColonyCountSiteSectionEvent`.
  """
  colonyCountEventByEventId: ColonyCountEvent

  """
  Reads a single `SiteSection` that is related to this `ColonyCountSiteSectionEvent`.
  """
  siteSectionBySiteSectionId: SiteSection

  """
  Reads a single `HowPdPresumed` that is related to this `ColonyCountSiteSectionEvent`.
  """
  howPdPresumedByHowPdPresumedId: HowPdPresumed

  """
  Reads a single `HowWnsPresumed` that is related to this `ColonyCountSiteSectionEvent`.
  """
  howWnsPresumedByHowWnsPresumedId: HowWnsPresumed

  """
  An edge for our `ColonyCountSiteSectionEvent`. May be used by Relay 1.
  """
  colonyCountSiteSectionEventEdge(
    """The method to use when ordering `ColonyCountSiteSectionEvent`."""
    orderBy: [ColonyCountSiteSectionEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ColonyCountSiteSectionEventsEdge
}

"""All input for the `updateColonyCountSiteSectionValueById` mutation."""
input UpdateColonyCountSiteSectionValueByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ColonyCountSiteSectionValue` being updated.
  """
  colonyCountSiteSectionValuePatch: ColonyCountSiteSectionValuePatch!
  id: Int!
}

"""All input for the `updateColonyCountSiteSectionValue` mutation."""
input UpdateColonyCountSiteSectionValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ColonyCountSiteSectionValue` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ColonyCountSiteSectionValue` being updated.
  """
  colonyCountSiteSectionValuePatch: ColonyCountSiteSectionValuePatch!
}

"""The output of our update `ColonyCountSiteSectionValue` mutation."""
type UpdateColonyCountSiteSectionValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ColonyCountSiteSectionValue` that was updated by this mutation."""
  colonyCountSiteSectionValue: ColonyCountSiteSectionValue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ColonyCountSiteSectionEvent` that is related to this `ColonyCountSiteSectionValue`.
  """
  colonyCountSiteSectionEventBySiteSectionEventId: ColonyCountSiteSectionEvent

  """
  Reads a single `Species` that is related to this `ColonyCountSiteSectionValue`.
  """
  speciesBySpeciesId: Species

  """
  Reads a single `PresumedCauseDeath` that is related to this `ColonyCountSiteSectionValue`.
  """
  presumedCauseDeathByPresumedCauseDeathId: PresumedCauseDeath

  """
  Reads a single `CountMethod` that is related to this `ColonyCountSiteSectionValue`.
  """
  countMethodByCountMethodId: CountMethod

  """
  Reads a single `CountConfidence` that is related to this `ColonyCountSiteSectionValue`.
  """
  countConfidenceByCountConfidenceId: CountConfidence

  """
  An edge for our `ColonyCountSiteSectionValue`. May be used by Relay 1.
  """
  colonyCountSiteSectionValueEdge(
    """The method to use when ordering `ColonyCountSiteSectionValue`."""
    orderBy: [ColonyCountSiteSectionValuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ColonyCountSiteSectionValuesEdge
}

"""All input for the `updateCountConfidenceById` mutation."""
input UpdateCountConfidenceByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CountConfidence` being updated.
  """
  countConfidencePatch: CountConfidencePatch!
  id: Int!
}

"""All input for the `updateCountConfidence` mutation."""
input UpdateCountConfidenceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CountConfidence` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CountConfidence` being updated.
  """
  countConfidencePatch: CountConfidencePatch!
}

"""The output of our update `CountConfidence` mutation."""
type UpdateCountConfidencePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CountConfidence` that was updated by this mutation."""
  countConfidence: CountConfidence

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CountConfidence`. May be used by Relay 1."""
  countConfidenceEdge(
    """The method to use when ordering `CountConfidence`."""
    orderBy: [CountConfidencesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CountConfidencesEdge
}

"""All input for the `updateCountMethodById` mutation."""
input UpdateCountMethodByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CountMethod` being updated.
  """
  countMethodPatch: CountMethodPatch!
  id: Int!
}

"""All input for the `updateCountMethod` mutation."""
input UpdateCountMethodInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CountMethod` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CountMethod` being updated.
  """
  countMethodPatch: CountMethodPatch!
}

"""The output of our update `CountMethod` mutation."""
type UpdateCountMethodPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CountMethod` that was updated by this mutation."""
  countMethod: CountMethod

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CountMethod`. May be used by Relay 1."""
  countMethodEdge(
    """The method to use when ordering `CountMethod`."""
    orderBy: [CountMethodsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CountMethodsEdge
}

"""All input for the `updateDeviceById` mutation."""
input UpdateDeviceByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Device` being updated.
  """
  devicePatch: DevicePatch!
  id: Int!
}

"""All input for the `updateDevice` mutation."""
input UpdateDeviceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Device` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Device` being updated.
  """
  devicePatch: DevicePatch!
}

"""The output of our update `Device` mutation."""
type UpdateDevicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Device` that was updated by this mutation."""
  device: Device

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `DeviceType` that is related to this `Device`."""
  deviceTypeByDeviceTypeId: DeviceType

  """Reads a single `MicrophoneType` that is related to this `Device`."""
  microphoneTypeByMicrophoneTypeId: MicrophoneType

  """
  Reads a single `MicrophoneHousingType` that is related to this `Device`.
  """
  microphoneHousingTypeByMicrophoneHousingTypeId: MicrophoneHousingType

  """An edge for our `Device`. May be used by Relay 1."""
  deviceEdge(
    """The method to use when ordering `Device`."""
    orderBy: [DevicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DevicesEdge
}

"""All input for the `updateDeviceTypeById` mutation."""
input UpdateDeviceTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DeviceType` being updated.
  """
  deviceTypePatch: DeviceTypePatch!
  id: Int!
}

"""All input for the `updateDeviceType` mutation."""
input UpdateDeviceTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DeviceType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DeviceType` being updated.
  """
  deviceTypePatch: DeviceTypePatch!
}

"""The output of our update `DeviceType` mutation."""
type UpdateDeviceTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DeviceType` that was updated by this mutation."""
  deviceType: DeviceType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `DeviceType`. May be used by Relay 1."""
  deviceTypeEdge(
    """The method to use when ordering `DeviceType`."""
    orderBy: [DeviceTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DeviceTypesEdge
}

"""All input for the `updateEnvironmentalDatumById` mutation."""
input UpdateEnvironmentalDatumByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EnvironmentalDatum` being updated.
  """
  environmentalDatumPatch: EnvironmentalDatumPatch!
  id: Int!
}

"""All input for the `updateEnvironmentalDatum` mutation."""
input UpdateEnvironmentalDatumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EnvironmentalDatum` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EnvironmentalDatum` being updated.
  """
  environmentalDatumPatch: EnvironmentalDatumPatch!
}

"""The output of our update `EnvironmentalDatum` mutation."""
type UpdateEnvironmentalDatumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EnvironmentalDatum` that was updated by this mutation."""
  environmentalDatum: EnvironmentalDatum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LoggerType` that is related to this `EnvironmentalDatum`.
  """
  loggerTypeByLoggerTypeId: LoggerType

  """An edge for our `EnvironmentalDatum`. May be used by Relay 1."""
  environmentalDatumEdge(
    """The method to use when ordering `EnvironmentalDatum`."""
    orderBy: [EnvironmentalDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): EnvironmentalDataEdge
}

"""All input for the `updateHabitatTypeById` mutation."""
input UpdateHabitatTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `HabitatType` being updated.
  """
  habitatTypePatch: HabitatTypePatch!
  id: Int!
}

"""All input for the `updateHabitatType` mutation."""
input UpdateHabitatTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HabitatType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `HabitatType` being updated.
  """
  habitatTypePatch: HabitatTypePatch!
}

"""The output of our update `HabitatType` mutation."""
type UpdateHabitatTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HabitatType` that was updated by this mutation."""
  habitatType: HabitatType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HabitatType`. May be used by Relay 1."""
  habitatTypeEdge(
    """The method to use when ordering `HabitatType`."""
    orderBy: [HabitatTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): HabitatTypesEdge
}

"""All input for the `updateHowPdPresumedById` mutation."""
input UpdateHowPdPresumedByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `HowPdPresumed` being updated.
  """
  howPdPresumedPatch: HowPdPresumedPatch!
  id: Int!
}

"""All input for the `updateHowPdPresumed` mutation."""
input UpdateHowPdPresumedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HowPdPresumed` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `HowPdPresumed` being updated.
  """
  howPdPresumedPatch: HowPdPresumedPatch!
}

"""The output of our update `HowPdPresumed` mutation."""
type UpdateHowPdPresumedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HowPdPresumed` that was updated by this mutation."""
  howPdPresumed: HowPdPresumed

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HowPdPresumed`. May be used by Relay 1."""
  howPdPresumedEdge(
    """The method to use when ordering `HowPdPresumed`."""
    orderBy: [HowPdPresumedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): HowPdPresumedsEdge
}

"""All input for the `updateHowWnsPresumedById` mutation."""
input UpdateHowWnsPresumedByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `HowWnsPresumed` being updated.
  """
  howWnsPresumedPatch: HowWnsPresumedPatch!
  id: Int!
}

"""All input for the `updateHowWnsPresumed` mutation."""
input UpdateHowWnsPresumedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HowWnsPresumed` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `HowWnsPresumed` being updated.
  """
  howWnsPresumedPatch: HowWnsPresumedPatch!
}

"""The output of our update `HowWnsPresumed` mutation."""
type UpdateHowWnsPresumedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HowWnsPresumed` that was updated by this mutation."""
  howWnsPresumed: HowWnsPresumed

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HowWnsPresumed`. May be used by Relay 1."""
  howWnsPresumedEdge(
    """The method to use when ordering `HowWnsPresumed`."""
    orderBy: [HowWnsPresumedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): HowWnsPresumedsEdge
}

"""All input for the `updateImageById` mutation."""
input UpdateImageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Image` being updated.
  """
  imagePatch: ImagePatch!
  id: Int!
}

"""All input for the `updateImage` mutation."""
input UpdateImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Image` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Image` being updated.
  """
  imagePatch: ImagePatch!
}

"""The output of our update `Image` mutation."""
type UpdateImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was updated by this mutation."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesEdge
}

"""All input for the `updateLaboratoryById` mutation."""
input UpdateLaboratoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Laboratory` being updated.
  """
  laboratoryPatch: LaboratoryPatch!
  id: Int!
}

"""All input for the `updateLaboratory` mutation."""
input UpdateLaboratoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Laboratory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Laboratory` being updated.
  """
  laboratoryPatch: LaboratoryPatch!
}

"""The output of our update `Laboratory` mutation."""
type UpdateLaboratoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Laboratory` that was updated by this mutation."""
  laboratory: Laboratory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Laboratory`. May be used by Relay 1."""
  laboratoryEdge(
    """The method to use when ordering `Laboratory`."""
    orderBy: [LaboratoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LaboratoriesEdge
}

"""All input for the `updateLoggerTypeById` mutation."""
input UpdateLoggerTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LoggerType` being updated.
  """
  loggerTypePatch: LoggerTypePatch!
  id: Int!
}

"""All input for the `updateLoggerType` mutation."""
input UpdateLoggerTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LoggerType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LoggerType` being updated.
  """
  loggerTypePatch: LoggerTypePatch!
}

"""The output of our update `LoggerType` mutation."""
type UpdateLoggerTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LoggerType` that was updated by this mutation."""
  loggerType: LoggerType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LoggerType`. May be used by Relay 1."""
  loggerTypeEdge(
    """The method to use when ordering `LoggerType`."""
    orderBy: [LoggerTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LoggerTypesEdge
}

"""All input for the `updateMicrophoneHousingTypeById` mutation."""
input UpdateMicrophoneHousingTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MicrophoneHousingType` being updated.
  """
  microphoneHousingTypePatch: MicrophoneHousingTypePatch!
  id: Int!
}

"""All input for the `updateMicrophoneHousingType` mutation."""
input UpdateMicrophoneHousingTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MicrophoneHousingType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MicrophoneHousingType` being updated.
  """
  microphoneHousingTypePatch: MicrophoneHousingTypePatch!
}

"""The output of our update `MicrophoneHousingType` mutation."""
type UpdateMicrophoneHousingTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MicrophoneHousingType` that was updated by this mutation."""
  microphoneHousingType: MicrophoneHousingType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MicrophoneHousingType`. May be used by Relay 1."""
  microphoneHousingTypeEdge(
    """The method to use when ordering `MicrophoneHousingType`."""
    orderBy: [MicrophoneHousingTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MicrophoneHousingTypesEdge
}

"""All input for the `updateMicrophoneOrientationById` mutation."""
input UpdateMicrophoneOrientationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MicrophoneOrientation` being updated.
  """
  microphoneOrientationPatch: MicrophoneOrientationPatch!
  id: Int!
}

"""All input for the `updateMicrophoneOrientation` mutation."""
input UpdateMicrophoneOrientationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MicrophoneOrientation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MicrophoneOrientation` being updated.
  """
  microphoneOrientationPatch: MicrophoneOrientationPatch!
}

"""The output of our update `MicrophoneOrientation` mutation."""
type UpdateMicrophoneOrientationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MicrophoneOrientation` that was updated by this mutation."""
  microphoneOrientation: MicrophoneOrientation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MicrophoneOrientation`. May be used by Relay 1."""
  microphoneOrientationEdge(
    """The method to use when ordering `MicrophoneOrientation`."""
    orderBy: [MicrophoneOrientationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MicrophoneOrientationsEdge
}

"""All input for the `updateMicrophoneTypeById` mutation."""
input UpdateMicrophoneTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MicrophoneType` being updated.
  """
  microphoneTypePatch: MicrophoneTypePatch!
  id: Int!
}

"""All input for the `updateMicrophoneType` mutation."""
input UpdateMicrophoneTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MicrophoneType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MicrophoneType` being updated.
  """
  microphoneTypePatch: MicrophoneTypePatch!
}

"""The output of our update `MicrophoneType` mutation."""
type UpdateMicrophoneTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MicrophoneType` that was updated by this mutation."""
  microphoneType: MicrophoneType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MicrophoneType`. May be used by Relay 1."""
  microphoneTypeEdge(
    """The method to use when ordering `MicrophoneType`."""
    orderBy: [MicrophoneTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MicrophoneTypesEdge
}

"""All input for the `updateMobileAcousticEventById` mutation."""
input UpdateMobileAcousticEventByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MobileAcousticEvent` being updated.
  """
  mobileAcousticEventPatch: MobileAcousticEventPatch!
  id: Int!
}

"""All input for the `updateMobileAcousticEvent` mutation."""
input UpdateMobileAcousticEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MobileAcousticEvent` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MobileAcousticEvent` being updated.
  """
  mobileAcousticEventPatch: MobileAcousticEventPatch!
}

"""The output of our update `MobileAcousticEvent` mutation."""
type UpdateMobileAcousticEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MobileAcousticEvent` that was updated by this mutation."""
  mobileAcousticEvent: MobileAcousticEvent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Survey` that is related to this `MobileAcousticEvent`.
  """
  surveyBySurveyId: Survey

  """
  Reads a single `Device` that is related to this `MobileAcousticEvent`.
  """
  deviceByDeviceId: Device

  """
  Reads a single `HabitatType` that is related to this `MobileAcousticEvent`.
  """
  habitatTypeByHabitatTypeId: HabitatType

  """An edge for our `MobileAcousticEvent`. May be used by Relay 1."""
  mobileAcousticEventEdge(
    """The method to use when ordering `MobileAcousticEvent`."""
    orderBy: [MobileAcousticEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MobileAcousticEventsEdge
}

"""All input for the `updateMobileAcousticValueById` mutation."""
input UpdateMobileAcousticValueByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MobileAcousticValue` being updated.
  """
  mobileAcousticValuePatch: MobileAcousticValuePatch!
  id: Int!
}

"""All input for the `updateMobileAcousticValue` mutation."""
input UpdateMobileAcousticValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MobileAcousticValue` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MobileAcousticValue` being updated.
  """
  mobileAcousticValuePatch: MobileAcousticValuePatch!
}

"""The output of our update `MobileAcousticValue` mutation."""
type UpdateMobileAcousticValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MobileAcousticValue` that was updated by this mutation."""
  mobileAcousticValue: MobileAcousticValue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Software` that is related to this `MobileAcousticValue`.
  """
  softwareBySoftwareId: Software

  """
  Reads a single `Species` that is related to this `MobileAcousticValue`.
  """
  speciesBySpeciesId: Species

  """An edge for our `MobileAcousticValue`. May be used by Relay 1."""
  mobileAcousticValueEdge(
    """The method to use when ordering `MobileAcousticValue`."""
    orderBy: [MobileAcousticValuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MobileAcousticValuesEdge
}

"""All input for the `updateOrganismCountById` mutation."""
input UpdateOrganismCountByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OrganismCount` being updated.
  """
  organismCountPatch: OrganismCountPatch!
  id: Int!
}

"""All input for the `updateOrganismCount` mutation."""
input UpdateOrganismCountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrganismCount` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OrganismCount` being updated.
  """
  organismCountPatch: OrganismCountPatch!
}

"""The output of our update `OrganismCount` mutation."""
type UpdateOrganismCountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrganismCount` that was updated by this mutation."""
  organismCount: OrganismCount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `OrganismCount`. May be used by Relay 1."""
  organismCountEdge(
    """The method to use when ordering `OrganismCount`."""
    orderBy: [OrganismCountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganismCountsEdge
}

"""All input for the `updatePresumedCauseDeathById` mutation."""
input UpdatePresumedCauseDeathByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PresumedCauseDeath` being updated.
  """
  presumedCauseDeathPatch: PresumedCauseDeathPatch!
  id: Int!
}

"""All input for the `updatePresumedCauseDeath` mutation."""
input UpdatePresumedCauseDeathInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PresumedCauseDeath` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PresumedCauseDeath` being updated.
  """
  presumedCauseDeathPatch: PresumedCauseDeathPatch!
}

"""The output of our update `PresumedCauseDeath` mutation."""
type UpdatePresumedCauseDeathPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PresumedCauseDeath` that was updated by this mutation."""
  presumedCauseDeath: PresumedCauseDeath

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PresumedCauseDeath`. May be used by Relay 1."""
  presumedCauseDeathEdge(
    """The method to use when ordering `PresumedCauseDeath`."""
    orderBy: [PresumedCauseDeathsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PresumedCauseDeathsEdge
}

"""All input for the `updateProjectReferenceById` mutation."""
input UpdateProjectReferenceByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectReference` being updated.
  """
  projectReferencePatch: ProjectReferencePatch!
  id: Int!
}

"""All input for the `updateProjectReference` mutation."""
input UpdateProjectReferenceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectReference` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProjectReference` being updated.
  """
  projectReferencePatch: ProjectReferencePatch!
}

"""The output of our update `ProjectReference` mutation."""
type UpdateProjectReferencePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectReference` that was updated by this mutation."""
  projectReference: ProjectReference

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProjectReference`. May be used by Relay 1."""
  projectReferenceEdge(
    """The method to use when ordering `ProjectReference`."""
    orderBy: [ProjectReferencesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectReferencesEdge
}

"""All input for the `updateProjectSiteByProjectIdAndSiteId` mutation."""
input UpdateProjectSiteByProjectIdAndSiteIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectSite` being updated.
  """
  projectSitePatch: ProjectSitePatch!
  projectId: Int!
  siteId: Int!
}

"""All input for the `updateProjectSite` mutation."""
input UpdateProjectSiteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectSite` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProjectSite` being updated.
  """
  projectSitePatch: ProjectSitePatch!
}

"""The output of our update `ProjectSite` mutation."""
type UpdateProjectSitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectSite` that was updated by this mutation."""
  projectSite: ProjectSite

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProjectReference` that is related to this `ProjectSite`.
  """
  projectReferenceByProjectId: ProjectReference

  """Reads a single `Site` that is related to this `ProjectSite`."""
  siteBySiteId: Site

  """An edge for our `ProjectSite`. May be used by Relay 1."""
  projectSiteEdge(
    """The method to use when ordering `ProjectSite`."""
    orderBy: [ProjectSitesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectSitesEdge
}

"""All input for the `updateSampleLevelInformationById` mutation."""
input UpdateSampleLevelInformationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SampleLevelInformation` being updated.
  """
  sampleLevelInformationPatch: SampleLevelInformationPatch!
  id: Int!
}

"""All input for the `updateSampleLevelInformation` mutation."""
input UpdateSampleLevelInformationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SampleLevelInformation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SampleLevelInformation` being updated.
  """
  sampleLevelInformationPatch: SampleLevelInformationPatch!
}

"""The output of our update `SampleLevelInformation` mutation."""
type UpdateSampleLevelInformationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SampleLevelInformation` that was updated by this mutation."""
  sampleLevelInformation: SampleLevelInformation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SampleType` that is related to this `SampleLevelInformation`.
  """
  sampleTypeBySampleTypeId: SampleType

  """
  Reads a single `Laboratory` that is related to this `SampleLevelInformation`.
  """
  laboratoryByLabWhereSampleSentId: Laboratory

  """An edge for our `SampleLevelInformation`. May be used by Relay 1."""
  sampleLevelInformationEdge(
    """The method to use when ordering `SampleLevelInformation`."""
    orderBy: [SampleLevelInformationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SampleLevelInformationsEdge
}

"""All input for the `updateSampleTypeById` mutation."""
input UpdateSampleTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SampleType` being updated.
  """
  sampleTypePatch: SampleTypePatch!
  id: Int!
}

"""All input for the `updateSampleType` mutation."""
input UpdateSampleTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SampleType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SampleType` being updated.
  """
  sampleTypePatch: SampleTypePatch!
}

"""The output of our update `SampleType` mutation."""
type UpdateSampleTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SampleType` that was updated by this mutation."""
  sampleType: SampleType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SampleType`. May be used by Relay 1."""
  sampleTypeEdge(
    """The method to use when ordering `SampleType`."""
    orderBy: [SampleTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SampleTypesEdge
}

"""All input for the `updateSiteById` mutation."""
input UpdateSiteByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Site` being updated.
  """
  sitePatch: SitePatch!
  id: Int!
}

"""All input for the `updateSite` mutation."""
input UpdateSiteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Site` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Site` being updated.
  """
  sitePatch: SitePatch!
}

"""All input for the `updateSiteLevelById` mutation."""
input UpdateSiteLevelByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SiteLevel` being updated.
  """
  siteLevelPatch: SiteLevelPatch!
  id: Int!
}

"""All input for the `updateSiteLevel` mutation."""
input UpdateSiteLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SiteLevel` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SiteLevel` being updated.
  """
  siteLevelPatch: SiteLevelPatch!
}

"""The output of our update `SiteLevel` mutation."""
type UpdateSiteLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteLevel` that was updated by this mutation."""
  siteLevel: SiteLevel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SiteLevel`. May be used by Relay 1."""
  siteLevelEdge(
    """The method to use when ordering `SiteLevel`."""
    orderBy: [SiteLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteLevelsEdge
}

"""All input for the `updateSiteMaterialById` mutation."""
input UpdateSiteMaterialByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SiteMaterial` being updated.
  """
  siteMaterialPatch: SiteMaterialPatch!
  id: Int!
}

"""All input for the `updateSiteMaterial` mutation."""
input UpdateSiteMaterialInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SiteMaterial` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SiteMaterial` being updated.
  """
  siteMaterialPatch: SiteMaterialPatch!
}

"""The output of our update `SiteMaterial` mutation."""
type UpdateSiteMaterialPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteMaterial` that was updated by this mutation."""
  siteMaterial: SiteMaterial

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SiteMaterial`. May be used by Relay 1."""
  siteMaterialEdge(
    """The method to use when ordering `SiteMaterial`."""
    orderBy: [SiteMaterialsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteMaterialsEdge
}

"""
All input for the `updateSiteOrganismCountBySiteIdAndOrganismCountId` mutation.
"""
input UpdateSiteOrganismCountBySiteIdAndOrganismCountIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SiteOrganismCount` being updated.
  """
  siteOrganismCountPatch: SiteOrganismCountPatch!
  siteId: Int!
  organismCountId: Int!
}

"""All input for the `updateSiteOrganismCount` mutation."""
input UpdateSiteOrganismCountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SiteOrganismCount` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SiteOrganismCount` being updated.
  """
  siteOrganismCountPatch: SiteOrganismCountPatch!
}

"""The output of our update `SiteOrganismCount` mutation."""
type UpdateSiteOrganismCountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteOrganismCount` that was updated by this mutation."""
  siteOrganismCount: SiteOrganismCount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Site` that is related to this `SiteOrganismCount`."""
  siteBySiteId: Site

  """
  Reads a single `OrganismCount` that is related to this `SiteOrganismCount`.
  """
  organismCountByOrganismCountId: OrganismCount

  """An edge for our `SiteOrganismCount`. May be used by Relay 1."""
  siteOrganismCountEdge(
    """The method to use when ordering `SiteOrganismCount`."""
    orderBy: [SiteOrganismCountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteOrganismCountsEdge
}

"""The output of our update `Site` mutation."""
type UpdateSitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Site` that was updated by this mutation."""
  site: Site

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SiteType` that is related to this `Site`."""
  siteTypeBySiteTypeId: SiteType

  """Reads a single `SiteMaterial` that is related to this `Site`."""
  siteMaterialBySiteMaterialId: SiteMaterial

  """Reads a single `SiteUse` that is related to this `Site`."""
  siteUseBySiteUseId: SiteUse

  """Reads a single `SiteSize` that is related to this `Site`."""
  siteSizeBySiteSizeId: SiteSize

  """An edge for our `Site`. May be used by Relay 1."""
  siteEdge(
    """The method to use when ordering `Site`."""
    orderBy: [SitesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SitesEdge
}

"""All input for the `updateSiteSectionById` mutation."""
input UpdateSiteSectionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SiteSection` being updated.
  """
  siteSectionPatch: SiteSectionPatch!
  id: Int!
}

"""All input for the `updateSiteSection` mutation."""
input UpdateSiteSectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SiteSection` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SiteSection` being updated.
  """
  siteSectionPatch: SiteSectionPatch!
}

"""The output of our update `SiteSection` mutation."""
type UpdateSiteSectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteSection` that was updated by this mutation."""
  siteSection: SiteSection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Site` that is related to this `SiteSection`."""
  siteBySiteId: Site

  """Reads a single `SiteLevel` that is related to this `SiteSection`."""
  siteLevelBySiteLevelId: SiteLevel

  """An edge for our `SiteSection`. May be used by Relay 1."""
  siteSectionEdge(
    """The method to use when ordering `SiteSection`."""
    orderBy: [SiteSectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteSectionsEdge
}

"""All input for the `updateSiteSizeById` mutation."""
input UpdateSiteSizeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SiteSize` being updated.
  """
  siteSizePatch: SiteSizePatch!
  id: Int!
}

"""All input for the `updateSiteSize` mutation."""
input UpdateSiteSizeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SiteSize` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SiteSize` being updated.
  """
  siteSizePatch: SiteSizePatch!
}

"""The output of our update `SiteSize` mutation."""
type UpdateSiteSizePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteSize` that was updated by this mutation."""
  siteSize: SiteSize

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SiteSize`. May be used by Relay 1."""
  siteSizeEdge(
    """The method to use when ordering `SiteSize`."""
    orderBy: [SiteSizesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteSizesEdge
}

"""All input for the `updateSiteTypeById` mutation."""
input UpdateSiteTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SiteType` being updated.
  """
  siteTypePatch: SiteTypePatch!
  id: Int!
}

"""All input for the `updateSiteType` mutation."""
input UpdateSiteTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SiteType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SiteType` being updated.
  """
  siteTypePatch: SiteTypePatch!
}

"""The output of our update `SiteType` mutation."""
type UpdateSiteTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteType` that was updated by this mutation."""
  siteType: SiteType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SiteType`. May be used by Relay 1."""
  siteTypeEdge(
    """The method to use when ordering `SiteType`."""
    orderBy: [SiteTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteTypesEdge
}

"""All input for the `updateSiteUseById` mutation."""
input UpdateSiteUseByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SiteUse` being updated.
  """
  siteUsePatch: SiteUsePatch!
  id: Int!
}

"""All input for the `updateSiteUse` mutation."""
input UpdateSiteUseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SiteUse` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SiteUse` being updated.
  """
  siteUsePatch: SiteUsePatch!
}

"""The output of our update `SiteUse` mutation."""
type UpdateSiteUsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SiteUse` that was updated by this mutation."""
  siteUse: SiteUse

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SiteUse`. May be used by Relay 1."""
  siteUseEdge(
    """The method to use when ordering `SiteUse`."""
    orderBy: [SiteUsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SiteUsesEdge
}

"""All input for the `updateSoftwareById` mutation."""
input UpdateSoftwareByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Software` being updated.
  """
  softwarePatch: SoftwarePatch!
  id: Int!
}

"""All input for the `updateSoftware` mutation."""
input UpdateSoftwareInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Software` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Software` being updated.
  """
  softwarePatch: SoftwarePatch!
}

"""The output of our update `Software` mutation."""
type UpdateSoftwarePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Software` that was updated by this mutation."""
  software: Software

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Software`. May be used by Relay 1."""
  softwareEdge(
    """The method to use when ordering `Software`."""
    orderBy: [SoftwaresOrderBy!] = [PRIMARY_KEY_ASC]
  ): SoftwaresEdge
}

"""All input for the `updateSpeciesById` mutation."""
input UpdateSpeciesByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Species` being updated.
  """
  speciesPatch: SpeciesPatch!
  id: Int!
}

"""All input for the `updateSpecies` mutation."""
input UpdateSpeciesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Species` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Species` being updated.
  """
  speciesPatch: SpeciesPatch!
}

"""The output of our update `Species` mutation."""
type UpdateSpeciesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Species` that was updated by this mutation."""
  species: Species

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Species`. May be used by Relay 1."""
  speciesEdge(
    """The method to use when ordering `Species`."""
    orderBy: [SpeciesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpeciesEdge
}

"""All input for the `updateStationaryAcousticEventById` mutation."""
input UpdateStationaryAcousticEventByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `StationaryAcousticEvent` being updated.
  """
  stationaryAcousticEventPatch: StationaryAcousticEventPatch!
  id: Int!
}

"""All input for the `updateStationaryAcousticEvent` mutation."""
input UpdateStationaryAcousticEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StationaryAcousticEvent` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `StationaryAcousticEvent` being updated.
  """
  stationaryAcousticEventPatch: StationaryAcousticEventPatch!
}

"""The output of our update `StationaryAcousticEvent` mutation."""
type UpdateStationaryAcousticEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StationaryAcousticEvent` that was updated by this mutation."""
  stationaryAcousticEvent: StationaryAcousticEvent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Survey` that is related to this `StationaryAcousticEvent`.
  """
  surveyBySurveyId: Survey

  """
  Reads a single `Device` that is related to this `StationaryAcousticEvent`.
  """
  deviceByDeviceId: Device

  """
  Reads a single `MicrophoneOrientation` that is related to this `StationaryAcousticEvent`.
  """
  microphoneOrientationByMicrophoneOrientationId: MicrophoneOrientation

  """
  Reads a single `ClutterType` that is related to this `StationaryAcousticEvent`.
  """
  clutterTypeByClutterTypeId: ClutterType

  """An edge for our `StationaryAcousticEvent`. May be used by Relay 1."""
  stationaryAcousticEventEdge(
    """The method to use when ordering `StationaryAcousticEvent`."""
    orderBy: [StationaryAcousticEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): StationaryAcousticEventsEdge
}

"""All input for the `updateStationaryAcousticImageById` mutation."""
input UpdateStationaryAcousticImageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `StationaryAcousticImage` being updated.
  """
  stationaryAcousticImagePatch: StationaryAcousticImagePatch!
  id: Int!
}

"""All input for the `updateStationaryAcousticImage` mutation."""
input UpdateStationaryAcousticImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StationaryAcousticImage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `StationaryAcousticImage` being updated.
  """
  stationaryAcousticImagePatch: StationaryAcousticImagePatch!
}

"""The output of our update `StationaryAcousticImage` mutation."""
type UpdateStationaryAcousticImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StationaryAcousticImage` that was updated by this mutation."""
  stationaryAcousticImage: StationaryAcousticImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Image` that is related to this `StationaryAcousticImage`.
  """
  imageByImageId: Image

  """
  Reads a single `StationaryAcousticEvent` that is related to this `StationaryAcousticImage`.
  """
  stationaryAcousticEventByStationaryAcousticEventId: StationaryAcousticEvent

  """An edge for our `StationaryAcousticImage`. May be used by Relay 1."""
  stationaryAcousticImageEdge(
    """The method to use when ordering `StationaryAcousticImage`."""
    orderBy: [StationaryAcousticImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): StationaryAcousticImagesEdge
}

"""All input for the `updateStationaryAcousticValueById` mutation."""
input UpdateStationaryAcousticValueByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `StationaryAcousticValue` being updated.
  """
  stationaryAcousticValuePatch: StationaryAcousticValuePatch!
  id: Int!
}

"""All input for the `updateStationaryAcousticValue` mutation."""
input UpdateStationaryAcousticValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StationaryAcousticValue` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `StationaryAcousticValue` being updated.
  """
  stationaryAcousticValuePatch: StationaryAcousticValuePatch!
}

"""The output of our update `StationaryAcousticValue` mutation."""
type UpdateStationaryAcousticValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StationaryAcousticValue` that was updated by this mutation."""
  stationaryAcousticValue: StationaryAcousticValue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `StationaryAcousticEvent` that is related to this `StationaryAcousticValue`.
  """
  stationaryAcousticEventBySaSurveyId: StationaryAcousticEvent

  """
  Reads a single `Software` that is related to this `StationaryAcousticValue`.
  """
  softwareBySoftwareId: Software

  """
  Reads a single `Species` that is related to this `StationaryAcousticValue`.
  """
  speciesBySpeciesId: Species

  """An edge for our `StationaryAcousticValue`. May be used by Relay 1."""
  stationaryAcousticValueEdge(
    """The method to use when ordering `StationaryAcousticValue`."""
    orderBy: [StationaryAcousticValuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): StationaryAcousticValuesEdge
}

"""All input for the `updateSurveyById` mutation."""
input UpdateSurveyByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Survey` being updated.
  """
  surveyPatch: SurveyPatch!
  id: Int!
}

"""All input for the `updateSurvey` mutation."""
input UpdateSurveyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Survey` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Survey` being updated.
  """
  surveyPatch: SurveyPatch!
}

"""The output of our update `Survey` mutation."""
type UpdateSurveyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Survey` that was updated by this mutation."""
  survey: Survey

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Survey`. May be used by Relay 1."""
  surveyEdge(
    """The method to use when ordering `Survey`."""
    orderBy: [SurveysOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveysEdge
}
